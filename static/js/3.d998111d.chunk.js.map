{"version":3,"sources":["../static/js/3.d998111d.chunk.js","../node_modules/brace/ext/language_tools.js"],"names":["webpackJsonp","370","module","exports","ace","define","acequire","oop","EventEmitter","lang","Range","Anchor","HashHandler","Tokenizer","comparePoints","SnippetManager","this","snippetMap","snippetNameMap","implement","getTokenizer","TabstopToken","str","_","stack","substr","test","inFormatString","tabstopId","parseInt","text","escape","ch","$tokenizer","start","regex","onMatch","val","state","length","expectIf","elseBranch","indexOf","changeCase","local","shift","t","unshift","next","token","merge","snippetVar","choices","slice","split","ts","fmtString","splitRegex","exec","guard","fmt","flag","code","splice","formatString","prototype","tokenizeTmSnippet","startState","getLineTokens","tokens","map","x","value","$getDefaultValue","editor","name","i","variables","__","replace","s","session","r","getWordRange","getTextRange","getLine","getCursorPosition","row","column","getUseSoftTabs","getTabSize","getVariableValue","varName","hasOwnProperty","tmStrFormat","re","RegExp","fmtTokens","_self","formatted","arguments","fmtParts","resolveVariables","gChangeCase","toUpperCase","toLowerCase","join","snippet","gotoNext","i1","result","push","skip","processed","insertSnippetForSelection","snippetText","cursor","line","tabString","getTabString","indentString","match","tabstops","forEach","p","id","index","some","expanding","arg","copy","lastIndexOf","Math","max","apply","lines","end","range","getSelectionRange","tabstopManager","TabstopManager","selectionId","inVirtualSelectionMode","selection","addTabstops","insertSnippet","self","forEachSelection","keepOrder","tabNext","$getScope","scope","$mode","$id","pop","inlinePhp","c","getState","substring","getActiveScopes","scopes","includeScopes","expandWithTab","options","expandSnippetForSelection","before","after","snippets","findMatchingSnippet","dryRun","doc","removeInLine","replaceBefore","replaceAfter","M__","matchBefore","T__","matchAfter","content","snippetList","startRe","endRe","triggerRe","endTriggerRe","register","wrapRegexp","src","guardedRegexp","opening","addSnippet","old","unregister","tabTrigger","trigger","escapeRegExp","endTrigger","endGuard","Array","isArray","_signal","removeSnippet","nameMap","parseSnippetFile","m","list","JSON","parse","e","key","guardRe","getSnippetByName","call","$onChange","onChange","bind","$onChangeSelection","delayedCall","onChangeSelection","schedule","$onChangeSession","onChangeSession","$onAfterExec","onAfterExec","attach","ranges","$openTabstops","selectedTabstop","on","commands","keyBinding","addKeyboardHandler","keyboardHandler","detach","removeTabstopMarkers","removeListener","removeKeyboardHandler","delta","isRemove","action","startRow","endRow","lineDif","colDiff","$inChange","removeRange","updateLinkedFields","hasLinkedRanges","firstNonLinked","linked","snippetManager","original","command","readOnly","lead","anchor","isEmpty","containsLead","contains","containsAnchor","dir","min","selectTabstop","addTabstopMarkers","setRange","sel","multiSelect","toSingleRange","clone","addRange","fromPoints","moveRelative","dest","movePoint","tabstop","markerId","addMarker","removeMarker","bindKeys","Tab","ed","Shift-Tab","Esc","Return","changeTracker","setPosition","pos","update","$insertRight","point","diff","importCssString","Editor","expandSnippet","Renderer","VirtualRenderer","event","dom","$singleLineEditor","el","renderer","$maxLines","setHighlightActiveLine","setShowPrintMargin","setShowGutter","setHighlightGutterLine","$mouseHandler","$focusWaitTimout","$highlightTagPending","AcePopup","parentNode","createElement","popup","appendChild","style","display","setStyle","setOption","noop","focus","$isFocused","$cursorLayer","restartTimer","element","opacity","$keepTextAreaAtCursor","highlight","$searchHighlight","clazz","getDocumentPosition","moveToPosition","selectionMarker","stop","lastMouseEvent","hoverMarker","Infinity","setSelectOnHover","y","scrollTop","setRow","setHoverMarker","$pos","getRow","$textLayer","selected","childNodes","config","firstRow","selectedNode","removeCssClass","addCssClass","hideHoverMarker","suppressRedraw","_emit","getHoveredRow","addListener","container","getLength","data","bgTokenizer","$tokenizeRow","caption","last","matchMask","type","className","meta","maxW","$size","scrollerWidth","layerConfig","characterWidth","metaData","$updateOnChange","$computeWidth","screenWidth","$blockScrolling","isOpen","isTopdown","setData","setValue","stringRepeat","getData","clearSelection","moveCursorTo","scrollCursorIntoView","hide","show","lineHeight","topdownOnly","screenHeight","window","innerHeight","innerWidth","maxH","top","$borderSize","$maxPixelHeight","bottom","checkForSizeChanges","left","offsetWidth","getTextLeftOffset","$padding","$imageSize","parForEach","array","fn","callback","completed","arLength","err","ID_REGEX","retrievePrecedingIdentifier","buf","reverse","retrieveFollowingIdentifier","getCompletionPrefix","prefix","completers","completer","identifierRegexps","identifierRegex","util","Autocomplete","autoInsert","autoSelect","exactMatch","gatherCompletionsId","blurListener","changeListener","mousedownListener","mousewheelListener","changeTimer","updateCompletions","tooltipTimer","updateDocTooltip","$init","document","body","documentElement","insertMatch","getPopup","openPopup","keepPopupPosition","completions","filtered","setTheme","getTheme","setFontSize","getFontSize","getPixelPosition","base","rect","getBoundingClientRect","offset","scrollLeft","gutterWidth","off","cancel","hideDocTooltip","activated","relatedTarget","nodeName","href","open","activeElement","textInput","getElement","fromTooltip","tooltipNode","goTo","where","filterText","getAllRanges","remove","execCommand","Up","Down","Ctrl-Up|Ctrl-Home","Ctrl-Down|Ctrl-End","Shift-Return","deleteSuffix","PageUp","gotoPageUp","PageDown","gotoPageDown","gatherCompletions","getSession","createAnchor","matches","total","getCompletions","results","concat","finished","showPopup","setFilter","_id","detachIfFinished","FilteredList","cancelContextMenu","all","getDocTooltip","docText","docHTML","showDocTooltip","item","margin","pointerEvents","tabIndex","onblur","innerHTML","textContent","right","isFocused","removeChild","startCommand","bindKey","filterCompletions","sort","a","b","score","prev","filter","items","needle","upper","lower","loop","distance","lastIndex","penalty","j","i2","getWordIndex","wordDistance","prefixPos","words","getValue","wordScores","Object","create","currentWord","word","idx","abs","wordScore","keys","textCompleter","keyWordCompleter","snippetCompleter","escapeHTML","setCompleters","addCompleter","onChangeMode","loadSnippetsForMode","mode","files","loadSnippetFile","modes","snippetFilePath","loadModule","doLiveAutocomplete","hasCompleter","defineOptions","enableBasicAutocompletion","set","addCommand","removeCommand","enableLiveAutocompletion","enableSnippets"],"mappings":"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","file":"static/js/3.d998111d.chunk.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 370:\n/***/ (function(module, exports) {\n\nace.define(\"ace/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/event_emitter\",\"ace/lib/lang\",\"ace/range\",\"ace/anchor\",\"ace/keyboard/hash_handler\",\"ace/tokenizer\",\"ace/lib/dom\",\"ace/editor\"], function(acequire, exports, module) {\n\"use strict\";\nvar oop = acequire(\"./lib/oop\");\nvar EventEmitter = acequire(\"./lib/event_emitter\").EventEmitter;\nvar lang = acequire(\"./lib/lang\");\nvar Range = acequire(\"./range\").Range;\nvar Anchor = acequire(\"./anchor\").Anchor;\nvar HashHandler = acequire(\"./keyboard/hash_handler\").HashHandler;\nvar Tokenizer = acequire(\"./tokenizer\").Tokenizer;\nvar comparePoints = Range.comparePoints;\n\nvar SnippetManager = function() {\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n};\n\n(function() {\n    oop.implement(this, EventEmitter);\n    \n    this.getTokenizer = function() {\n        function TabstopToken(str, _, stack) {\n            str = str.substr(1);\n            if (/^\\d+$/.test(str) && !stack.inFormatString)\n                return [{tabstopId: parseInt(str, 10)}];\n            return [{text: str}];\n        }\n        function escape(ch) {\n            return \"(?:[^\\\\\\\\\" + ch + \"]|\\\\\\\\.)\";\n        }\n        SnippetManager.$tokenizer = new Tokenizer({\n            start: [\n                {regex: /:/, onMatch: function(val, state, stack) {\n                    if (stack.length && stack[0].expectIf) {\n                        stack[0].expectIf = false;\n                        stack[0].elseBranch = stack[0];\n                        return [stack[0]];\n                    }\n                    return \":\";\n                }},\n                {regex: /\\\\./, onMatch: function(val, state, stack) {\n                    var ch = val[1];\n                    if (ch == \"}\" && stack.length) {\n                        val = ch;\n                    }else if (\"`$\\\\\".indexOf(ch) != -1) {\n                        val = ch;\n                    } else if (stack.inFormatString) {\n                        if (ch == \"n\")\n                            val = \"\\n\";\n                        else if (ch == \"t\")\n                            val = \"\\n\";\n                        else if (\"ulULE\".indexOf(ch) != -1) {\n                            val = {changeCase: ch, local: ch > \"a\"};\n                        }\n                    }\n\n                    return [val];\n                }},\n                {regex: /}/, onMatch: function(val, state, stack) {\n                    return [stack.length ? stack.shift() : val];\n                }},\n                {regex: /\\$(?:\\d+|\\w+)/, onMatch: TabstopToken},\n                {regex: /\\$\\{[\\dA-Z_a-z]+/, onMatch: function(str, state, stack) {\n                    var t = TabstopToken(str.substr(1), state, stack);\n                    stack.unshift(t[0]);\n                    return t;\n                }, next: \"snippetVar\"},\n                {regex: /\\n/, token: \"newline\", merge: false}\n            ],\n            snippetVar: [\n                {regex: \"\\\\|\" + escape(\"\\\\|\") + \"*\\\\|\", onMatch: function(val, state, stack) {\n                    stack[0].choices = val.slice(1, -1).split(\",\");\n                }, next: \"start\"},\n                {regex: \"/(\" + escape(\"/\") + \"+)/(?:(\" + escape(\"/\") + \"*)/)(\\\\w*):?\",\n                 onMatch: function(val, state, stack) {\n                    var ts = stack[0];\n                    ts.fmtString = val;\n\n                    val = this.splitRegex.exec(val);\n                    ts.guard = val[1];\n                    ts.fmt = val[2];\n                    ts.flag = val[3];\n                    return \"\";\n                }, next: \"start\"},\n                {regex: \"`\" + escape(\"`\") + \"*`\", onMatch: function(val, state, stack) {\n                    stack[0].code = val.splice(1, -1);\n                    return \"\";\n                }, next: \"start\"},\n                {regex: \"\\\\?\", onMatch: function(val, state, stack) {\n                    if (stack[0])\n                        stack[0].expectIf = true;\n                }, next: \"start\"},\n                {regex: \"([^:}\\\\\\\\]|\\\\\\\\.)*:?\", token: \"\", next: \"start\"}\n            ],\n            formatString: [\n                {regex: \"/(\" + escape(\"/\") + \"+)/\", token: \"regex\"},\n                {regex: \"\", onMatch: function(val, state, stack) {\n                    stack.inFormatString = true;\n                }, next: \"start\"}\n            ]\n        });\n        SnippetManager.prototype.getTokenizer = function() {\n            return SnippetManager.$tokenizer;\n        };\n        return SnippetManager.$tokenizer;\n    };\n\n    this.tokenizeTmSnippet = function(str, startState) {\n        return this.getTokenizer().getLineTokens(str, startState).tokens.map(function(x) {\n            return x.value || x;\n        });\n    };\n\n    this.$getDefaultValue = function(editor, name) {\n        if (/^[A-Z]\\d+$/.test(name)) {\n            var i = name.substr(1);\n            return (this.variables[name[0] + \"__\"] || {})[i];\n        }\n        if (/^\\d+$/.test(name)) {\n            return (this.variables.__ || {})[name];\n        }\n        name = name.replace(/^TM_/, \"\");\n\n        if (!editor)\n            return;\n        var s = editor.session;\n        switch(name) {\n            case \"CURRENT_WORD\":\n                var r = s.getWordRange();\n            case \"SELECTION\":\n            case \"SELECTED_TEXT\":\n                return s.getTextRange(r);\n            case \"CURRENT_LINE\":\n                return s.getLine(editor.getCursorPosition().row);\n            case \"PREV_LINE\": // not possible in textmate\n                return s.getLine(editor.getCursorPosition().row - 1);\n            case \"LINE_INDEX\":\n                return editor.getCursorPosition().column;\n            case \"LINE_NUMBER\":\n                return editor.getCursorPosition().row + 1;\n            case \"SOFT_TABS\":\n                return s.getUseSoftTabs() ? \"YES\" : \"NO\";\n            case \"TAB_SIZE\":\n                return s.getTabSize();\n            case \"FILENAME\":\n            case \"FILEPATH\":\n                return \"\";\n            case \"FULLNAME\":\n                return \"Ace\";\n        }\n    };\n    this.variables = {};\n    this.getVariableValue = function(editor, varName) {\n        if (this.variables.hasOwnProperty(varName))\n            return this.variables[varName](editor, varName) || \"\";\n        return this.$getDefaultValue(editor, varName) || \"\";\n    };\n    this.tmStrFormat = function(str, ch, editor) {\n        var flag = ch.flag || \"\";\n        var re = ch.guard;\n        re = new RegExp(re, flag.replace(/[^gi]/, \"\"));\n        var fmtTokens = this.tokenizeTmSnippet(ch.fmt, \"formatString\");\n        var _self = this;\n        var formatted = str.replace(re, function() {\n            _self.variables.__ = arguments;\n            var fmtParts = _self.resolveVariables(fmtTokens, editor);\n            var gChangeCase = \"E\";\n            for (var i  = 0; i < fmtParts.length; i++) {\n                var ch = fmtParts[i];\n                if (typeof ch == \"object\") {\n                    fmtParts[i] = \"\";\n                    if (ch.changeCase && ch.local) {\n                        var next = fmtParts[i + 1];\n                        if (next && typeof next == \"string\") {\n                            if (ch.changeCase == \"u\")\n                                fmtParts[i] = next[0].toUpperCase();\n                            else\n                                fmtParts[i] = next[0].toLowerCase();\n                            fmtParts[i + 1] = next.substr(1);\n                        }\n                    } else if (ch.changeCase) {\n                        gChangeCase = ch.changeCase;\n                    }\n                } else if (gChangeCase == \"U\") {\n                    fmtParts[i] = ch.toUpperCase();\n                } else if (gChangeCase == \"L\") {\n                    fmtParts[i] = ch.toLowerCase();\n                }\n            }\n            return fmtParts.join(\"\");\n        });\n        this.variables.__ = null;\n        return formatted;\n    };\n\n    this.resolveVariables = function(snippet, editor) {\n        var result = [];\n        for (var i = 0; i < snippet.length; i++) {\n            var ch = snippet[i];\n            if (typeof ch == \"string\") {\n                result.push(ch);\n            } else if (typeof ch != \"object\") {\n                continue;\n            } else if (ch.skip) {\n                gotoNext(ch);\n            } else if (ch.processed < i) {\n                continue;\n            } else if (ch.text) {\n                var value = this.getVariableValue(editor, ch.text);\n                if (value && ch.fmtString)\n                    value = this.tmStrFormat(value, ch);\n                ch.processed = i;\n                if (ch.expectIf == null) {\n                    if (value) {\n                        result.push(value);\n                        gotoNext(ch);\n                    }\n                } else {\n                    if (value) {\n                        ch.skip = ch.elseBranch;\n                    } else\n                        gotoNext(ch);\n                }\n            } else if (ch.tabstopId != null) {\n                result.push(ch);\n            } else if (ch.changeCase != null) {\n                result.push(ch);\n            }\n        }\n        function gotoNext(ch) {\n            var i1 = snippet.indexOf(ch, i + 1);\n            if (i1 != -1)\n                i = i1;\n        }\n        return result;\n    };\n\n    this.insertSnippetForSelection = function(editor, snippetText) {\n        var cursor = editor.getCursorPosition();\n        var line = editor.session.getLine(cursor.row);\n        var tabString = editor.session.getTabString();\n        var indentString = line.match(/^\\s*/)[0];\n        \n        if (cursor.column < indentString.length)\n            indentString = indentString.slice(0, cursor.column);\n\n        snippetText = snippetText.replace(/\\r/g, \"\");\n        var tokens = this.tokenizeTmSnippet(snippetText);\n        tokens = this.resolveVariables(tokens, editor);\n        tokens = tokens.map(function(x) {\n            if (x == \"\\n\")\n                return x + indentString;\n            if (typeof x == \"string\")\n                return x.replace(/\\t/g, tabString);\n            return x;\n        });\n        var tabstops = [];\n        tokens.forEach(function(p, i) {\n            if (typeof p != \"object\")\n                return;\n            var id = p.tabstopId;\n            var ts = tabstops[id];\n            if (!ts) {\n                ts = tabstops[id] = [];\n                ts.index = id;\n                ts.value = \"\";\n            }\n            if (ts.indexOf(p) !== -1)\n                return;\n            ts.push(p);\n            var i1 = tokens.indexOf(p, i + 1);\n            if (i1 === -1)\n                return;\n\n            var value = tokens.slice(i + 1, i1);\n            var isNested = value.some(function(t) {return typeof t === \"object\"});          \n            if (isNested && !ts.value) {\n                ts.value = value;\n            } else if (value.length && (!ts.value || typeof ts.value !== \"string\")) {\n                ts.value = value.join(\"\");\n            }\n        });\n        tabstops.forEach(function(ts) {ts.length = 0});\n        var expanding = {};\n        function copyValue(val) {\n            var copy = [];\n            for (var i = 0; i < val.length; i++) {\n                var p = val[i];\n                if (typeof p == \"object\") {\n                    if (expanding[p.tabstopId])\n                        continue;\n                    var j = val.lastIndexOf(p, i - 1);\n                    p = copy[j] || {tabstopId: p.tabstopId};\n                }\n                copy[i] = p;\n            }\n            return copy;\n        }\n        for (var i = 0; i < tokens.length; i++) {\n            var p = tokens[i];\n            if (typeof p != \"object\")\n                continue;\n            var id = p.tabstopId;\n            var i1 = tokens.indexOf(p, i + 1);\n            if (expanding[id]) {\n                if (expanding[id] === p)\n                    expanding[id] = null;\n                continue;\n            }\n            \n            var ts = tabstops[id];\n            var arg = typeof ts.value == \"string\" ? [ts.value] : copyValue(ts.value);\n            arg.unshift(i + 1, Math.max(0, i1 - i));\n            arg.push(p);\n            expanding[id] = p;\n            tokens.splice.apply(tokens, arg);\n\n            if (ts.indexOf(p) === -1)\n                ts.push(p);\n        }\n        var row = 0, column = 0;\n        var text = \"\";\n        tokens.forEach(function(t) {\n            if (typeof t === \"string\") {\n                var lines = t.split(\"\\n\");\n                if (lines.length > 1){\n                    column = lines[lines.length - 1].length;\n                    row += lines.length - 1;\n                } else\n                    column += t.length;\n                text += t;\n            } else {\n                if (!t.start)\n                    t.start = {row: row, column: column};\n                else\n                    t.end = {row: row, column: column};\n            }\n        });\n        var range = editor.getSelectionRange();\n        var end = editor.session.replace(range, text);\n\n        var tabstopManager = new TabstopManager(editor);\n        var selectionId = editor.inVirtualSelectionMode && editor.selection.index;\n        tabstopManager.addTabstops(tabstops, range.start, end, selectionId);\n    };\n    \n    this.insertSnippet = function(editor, snippetText) {\n        var self = this;\n        if (editor.inVirtualSelectionMode)\n            return self.insertSnippetForSelection(editor, snippetText);\n        \n        editor.forEachSelection(function() {\n            self.insertSnippetForSelection(editor, snippetText);\n        }, null, {keepOrder: true});\n        \n        if (editor.tabstopManager)\n            editor.tabstopManager.tabNext();\n    };\n\n    this.$getScope = function(editor) {\n        var scope = editor.session.$mode.$id || \"\";\n        scope = scope.split(\"/\").pop();\n        if (scope === \"html\" || scope === \"php\") {\n            if (scope === \"php\" && !editor.session.$mode.inlinePhp) \n                scope = \"html\";\n            var c = editor.getCursorPosition();\n            var state = editor.session.getState(c.row);\n            if (typeof state === \"object\") {\n                state = state[0];\n            }\n            if (state.substring) {\n                if (state.substring(0, 3) == \"js-\")\n                    scope = \"javascript\";\n                else if (state.substring(0, 4) == \"css-\")\n                    scope = \"css\";\n                else if (state.substring(0, 4) == \"php-\")\n                    scope = \"php\";\n            }\n        }\n        \n        return scope;\n    };\n\n    this.getActiveScopes = function(editor) {\n        var scope = this.$getScope(editor);\n        var scopes = [scope];\n        var snippetMap = this.snippetMap;\n        if (snippetMap[scope] && snippetMap[scope].includeScopes) {\n            scopes.push.apply(scopes, snippetMap[scope].includeScopes);\n        }\n        scopes.push(\"_\");\n        return scopes;\n    };\n\n    this.expandWithTab = function(editor, options) {\n        var self = this;\n        var result = editor.forEachSelection(function() {\n            return self.expandSnippetForSelection(editor, options);\n        }, null, {keepOrder: true});\n        if (result && editor.tabstopManager)\n            editor.tabstopManager.tabNext();\n        return result;\n    };\n    \n    this.expandSnippetForSelection = function(editor, options) {\n        var cursor = editor.getCursorPosition();\n        var line = editor.session.getLine(cursor.row);\n        var before = line.substring(0, cursor.column);\n        var after = line.substr(cursor.column);\n\n        var snippetMap = this.snippetMap;\n        var snippet;\n        this.getActiveScopes(editor).some(function(scope) {\n            var snippets = snippetMap[scope];\n            if (snippets)\n                snippet = this.findMatchingSnippet(snippets, before, after);\n            return !!snippet;\n        }, this);\n        if (!snippet)\n            return false;\n        if (options && options.dryRun)\n            return true;\n        editor.session.doc.removeInLine(cursor.row,\n            cursor.column - snippet.replaceBefore.length,\n            cursor.column + snippet.replaceAfter.length\n        );\n\n        this.variables.M__ = snippet.matchBefore;\n        this.variables.T__ = snippet.matchAfter;\n        this.insertSnippetForSelection(editor, snippet.content);\n\n        this.variables.M__ = this.variables.T__ = null;\n        return true;\n    };\n\n    this.findMatchingSnippet = function(snippetList, before, after) {\n        for (var i = snippetList.length; i--;) {\n            var s = snippetList[i];\n            if (s.startRe && !s.startRe.test(before))\n                continue;\n            if (s.endRe && !s.endRe.test(after))\n                continue;\n            if (!s.startRe && !s.endRe)\n                continue;\n\n            s.matchBefore = s.startRe ? s.startRe.exec(before) : [\"\"];\n            s.matchAfter = s.endRe ? s.endRe.exec(after) : [\"\"];\n            s.replaceBefore = s.triggerRe ? s.triggerRe.exec(before)[0] : \"\";\n            s.replaceAfter = s.endTriggerRe ? s.endTriggerRe.exec(after)[0] : \"\";\n            return s;\n        }\n    };\n\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n    this.register = function(snippets, scope) {\n        var snippetMap = this.snippetMap;\n        var snippetNameMap = this.snippetNameMap;\n        var self = this;\n        \n        if (!snippets) \n            snippets = [];\n        \n        function wrapRegexp(src) {\n            if (src && !/^\\^?\\(.*\\)\\$?$|^\\\\b$/.test(src))\n                src = \"(?:\" + src + \")\";\n\n            return src || \"\";\n        }\n        function guardedRegexp(re, guard, opening) {\n            re = wrapRegexp(re);\n            guard = wrapRegexp(guard);\n            if (opening) {\n                re = guard + re;\n                if (re && re[re.length - 1] != \"$\")\n                    re = re + \"$\";\n            } else {\n                re = re + guard;\n                if (re && re[0] != \"^\")\n                    re = \"^\" + re;\n            }\n            return new RegExp(re);\n        }\n\n        function addSnippet(s) {\n            if (!s.scope)\n                s.scope = scope || \"_\";\n            scope = s.scope;\n            if (!snippetMap[scope]) {\n                snippetMap[scope] = [];\n                snippetNameMap[scope] = {};\n            }\n\n            var map = snippetNameMap[scope];\n            if (s.name) {\n                var old = map[s.name];\n                if (old)\n                    self.unregister(old);\n                map[s.name] = s;\n            }\n            snippetMap[scope].push(s);\n\n            if (s.tabTrigger && !s.trigger) {\n                if (!s.guard && /^\\w/.test(s.tabTrigger))\n                    s.guard = \"\\\\b\";\n                s.trigger = lang.escapeRegExp(s.tabTrigger);\n            }\n            \n            if (!s.trigger && !s.guard && !s.endTrigger && !s.endGuard)\n                return;\n            \n            s.startRe = guardedRegexp(s.trigger, s.guard, true);\n            s.triggerRe = new RegExp(s.trigger, \"\", true);\n\n            s.endRe = guardedRegexp(s.endTrigger, s.endGuard, true);\n            s.endTriggerRe = new RegExp(s.endTrigger, \"\", true);\n        }\n\n        if (snippets && snippets.content)\n            addSnippet(snippets);\n        else if (Array.isArray(snippets))\n            snippets.forEach(addSnippet);\n        \n        this._signal(\"registerSnippets\", {scope: scope});\n    };\n    this.unregister = function(snippets, scope) {\n        var snippetMap = this.snippetMap;\n        var snippetNameMap = this.snippetNameMap;\n\n        function removeSnippet(s) {\n            var nameMap = snippetNameMap[s.scope||scope];\n            if (nameMap && nameMap[s.name]) {\n                delete nameMap[s.name];\n                var map = snippetMap[s.scope||scope];\n                var i = map && map.indexOf(s);\n                if (i >= 0)\n                    map.splice(i, 1);\n            }\n        }\n        if (snippets.content)\n            removeSnippet(snippets);\n        else if (Array.isArray(snippets))\n            snippets.forEach(removeSnippet);\n    };\n    this.parseSnippetFile = function(str) {\n        str = str.replace(/\\r/g, \"\");\n        var list = [], snippet = {};\n        var re = /^#.*|^({[\\s\\S]*})\\s*$|^(\\S+) (.*)$|^((?:\\n*\\t.*)+)/gm;\n        var m;\n        while (m = re.exec(str)) {\n            if (m[1]) {\n                try {\n                    snippet = JSON.parse(m[1]);\n                    list.push(snippet);\n                } catch (e) {}\n            } if (m[4]) {\n                snippet.content = m[4].replace(/^\\t/gm, \"\");\n                list.push(snippet);\n                snippet = {};\n            } else {\n                var key = m[2], val = m[3];\n                if (key == \"regex\") {\n                    var guardRe = /\\/((?:[^\\/\\\\]|\\\\.)*)|$/g;\n                    snippet.guard = guardRe.exec(val)[1];\n                    snippet.trigger = guardRe.exec(val)[1];\n                    snippet.endTrigger = guardRe.exec(val)[1];\n                    snippet.endGuard = guardRe.exec(val)[1];\n                } else if (key == \"snippet\") {\n                    snippet.tabTrigger = val.match(/^\\S*/)[0];\n                    if (!snippet.name)\n                        snippet.name = val;\n                } else {\n                    snippet[key] = val;\n                }\n            }\n        }\n        return list;\n    };\n    this.getSnippetByName = function(name, editor) {\n        var snippetMap = this.snippetNameMap;\n        var snippet;\n        this.getActiveScopes(editor).some(function(scope) {\n            var snippets = snippetMap[scope];\n            if (snippets)\n                snippet = snippets[name];\n            return !!snippet;\n        }, this);\n        return snippet;\n    };\n\n}).call(SnippetManager.prototype);\n\n\nvar TabstopManager = function(editor) {\n    if (editor.tabstopManager)\n        return editor.tabstopManager;\n    editor.tabstopManager = this;\n    this.$onChange = this.onChange.bind(this);\n    this.$onChangeSelection = lang.delayedCall(this.onChangeSelection.bind(this)).schedule;\n    this.$onChangeSession = this.onChangeSession.bind(this);\n    this.$onAfterExec = this.onAfterExec.bind(this);\n    this.attach(editor);\n};\n(function() {\n    this.attach = function(editor) {\n        this.index = 0;\n        this.ranges = [];\n        this.tabstops = [];\n        this.$openTabstops = null;\n        this.selectedTabstop = null;\n\n        this.editor = editor;\n        this.editor.on(\"change\", this.$onChange);\n        this.editor.on(\"changeSelection\", this.$onChangeSelection);\n        this.editor.on(\"changeSession\", this.$onChangeSession);\n        this.editor.commands.on(\"afterExec\", this.$onAfterExec);\n        this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n    this.detach = function() {\n        this.tabstops.forEach(this.removeTabstopMarkers, this);\n        this.ranges = null;\n        this.tabstops = null;\n        this.selectedTabstop = null;\n        this.editor.removeListener(\"change\", this.$onChange);\n        this.editor.removeListener(\"changeSelection\", this.$onChangeSelection);\n        this.editor.removeListener(\"changeSession\", this.$onChangeSession);\n        this.editor.commands.removeListener(\"afterExec\", this.$onAfterExec);\n        this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n        this.editor.tabstopManager = null;\n        this.editor = null;\n    };\n\n    this.onChange = function(delta) {\n        var changeRange = delta;\n        var isRemove = delta.action[0] == \"r\";\n        var start = delta.start;\n        var end = delta.end;\n        var startRow = start.row;\n        var endRow = end.row;\n        var lineDif = endRow - startRow;\n        var colDiff = end.column - start.column;\n\n        if (isRemove) {\n            lineDif = -lineDif;\n            colDiff = -colDiff;\n        }\n        if (!this.$inChange && isRemove) {\n            var ts = this.selectedTabstop;\n            var changedOutside = ts && !ts.some(function(r) {\n                return comparePoints(r.start, start) <= 0 && comparePoints(r.end, end) >= 0;\n            });\n            if (changedOutside)\n                return this.detach();\n        }\n        var ranges = this.ranges;\n        for (var i = 0; i < ranges.length; i++) {\n            var r = ranges[i];\n            if (r.end.row < start.row)\n                continue;\n\n            if (isRemove && comparePoints(start, r.start) < 0 && comparePoints(end, r.end) > 0) {\n                this.removeRange(r);\n                i--;\n                continue;\n            }\n\n            if (r.start.row == startRow && r.start.column > start.column)\n                r.start.column += colDiff;\n            if (r.end.row == startRow && r.end.column >= start.column)\n                r.end.column += colDiff;\n            if (r.start.row >= startRow)\n                r.start.row += lineDif;\n            if (r.end.row >= startRow)\n                r.end.row += lineDif;\n\n            if (comparePoints(r.start, r.end) > 0)\n                this.removeRange(r);\n        }\n        if (!ranges.length)\n            this.detach();\n    };\n    this.updateLinkedFields = function() {\n        var ts = this.selectedTabstop;\n        if (!ts || !ts.hasLinkedRanges)\n            return;\n        this.$inChange = true;\n        var session = this.editor.session;\n        var text = session.getTextRange(ts.firstNonLinked);\n        for (var i = ts.length; i--;) {\n            var range = ts[i];\n            if (!range.linked)\n                continue;\n            var fmt = exports.snippetManager.tmStrFormat(text, range.original);\n            session.replace(range, fmt);\n        }\n        this.$inChange = false;\n    };\n    this.onAfterExec = function(e) {\n        if (e.command && !e.command.readOnly)\n            this.updateLinkedFields();\n    };\n    this.onChangeSelection = function() {\n        if (!this.editor)\n            return;\n        var lead = this.editor.selection.lead;\n        var anchor = this.editor.selection.anchor;\n        var isEmpty = this.editor.selection.isEmpty();\n        for (var i = this.ranges.length; i--;) {\n            if (this.ranges[i].linked)\n                continue;\n            var containsLead = this.ranges[i].contains(lead.row, lead.column);\n            var containsAnchor = isEmpty || this.ranges[i].contains(anchor.row, anchor.column);\n            if (containsLead && containsAnchor)\n                return;\n        }\n        this.detach();\n    };\n    this.onChangeSession = function() {\n        this.detach();\n    };\n    this.tabNext = function(dir) {\n        var max = this.tabstops.length;\n        var index = this.index + (dir || 1);\n        index = Math.min(Math.max(index, 1), max);\n        if (index == max)\n            index = 0;\n        this.selectTabstop(index);\n        if (index === 0)\n            this.detach();\n    };\n    this.selectTabstop = function(index) {\n        this.$openTabstops = null;\n        var ts = this.tabstops[this.index];\n        if (ts)\n            this.addTabstopMarkers(ts);\n        this.index = index;\n        ts = this.tabstops[this.index];\n        if (!ts || !ts.length)\n            return;\n        \n        this.selectedTabstop = ts;\n        if (!this.editor.inVirtualSelectionMode) {        \n            var sel = this.editor.multiSelect;\n            sel.toSingleRange(ts.firstNonLinked.clone());\n            for (var i = ts.length; i--;) {\n                if (ts.hasLinkedRanges && ts[i].linked)\n                    continue;\n                sel.addRange(ts[i].clone(), true);\n            }\n            if (sel.ranges[0])\n                sel.addRange(sel.ranges[0].clone());\n        } else {\n            this.editor.selection.setRange(ts.firstNonLinked);\n        }\n        \n        this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n    this.addTabstops = function(tabstops, start, end) {\n        if (!this.$openTabstops)\n            this.$openTabstops = [];\n        if (!tabstops[0]) {\n            var p = Range.fromPoints(end, end);\n            moveRelative(p.start, start);\n            moveRelative(p.end, start);\n            tabstops[0] = [p];\n            tabstops[0].index = 0;\n        }\n\n        var i = this.index;\n        var arg = [i + 1, 0];\n        var ranges = this.ranges;\n        tabstops.forEach(function(ts, index) {\n            var dest = this.$openTabstops[index] || ts;\n                \n            for (var i = ts.length; i--;) {\n                var p = ts[i];\n                var range = Range.fromPoints(p.start, p.end || p.start);\n                movePoint(range.start, start);\n                movePoint(range.end, start);\n                range.original = p;\n                range.tabstop = dest;\n                ranges.push(range);\n                if (dest != ts)\n                    dest.unshift(range);\n                else\n                    dest[i] = range;\n                if (p.fmtString) {\n                    range.linked = true;\n                    dest.hasLinkedRanges = true;\n                } else if (!dest.firstNonLinked)\n                    dest.firstNonLinked = range;\n            }\n            if (!dest.firstNonLinked)\n                dest.hasLinkedRanges = false;\n            if (dest === ts) {\n                arg.push(dest);\n                this.$openTabstops[index] = dest;\n            }\n            this.addTabstopMarkers(dest);\n        }, this);\n        \n        if (arg.length > 2) {\n            if (this.tabstops.length)\n                arg.push(arg.splice(2, 1)[0]);\n            this.tabstops.splice.apply(this.tabstops, arg);\n        }\n    };\n\n    this.addTabstopMarkers = function(ts) {\n        var session = this.editor.session;\n        ts.forEach(function(range) {\n            if  (!range.markerId)\n                range.markerId = session.addMarker(range, \"ace_snippet-marker\", \"text\");\n        });\n    };\n    this.removeTabstopMarkers = function(ts) {\n        var session = this.editor.session;\n        ts.forEach(function(range) {\n            session.removeMarker(range.markerId);\n            range.markerId = null;\n        });\n    };\n    this.removeRange = function(range) {\n        var i = range.tabstop.indexOf(range);\n        range.tabstop.splice(i, 1);\n        i = this.ranges.indexOf(range);\n        this.ranges.splice(i, 1);\n        this.editor.session.removeMarker(range.markerId);\n        if (!range.tabstop.length) {\n            i = this.tabstops.indexOf(range.tabstop);\n            if (i != -1)\n                this.tabstops.splice(i, 1);\n            if (!this.tabstops.length)\n                this.detach();\n        }\n    };\n\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys({\n        \"Tab\": function(ed) {\n            if (exports.snippetManager && exports.snippetManager.expandWithTab(ed)) {\n                return;\n            }\n\n            ed.tabstopManager.tabNext(1);\n        },\n        \"Shift-Tab\": function(ed) {\n            ed.tabstopManager.tabNext(-1);\n        },\n        \"Esc\": function(ed) {\n            ed.tabstopManager.detach();\n        },\n        \"Return\": function(ed) {\n            return false;\n        }\n    });\n}).call(TabstopManager.prototype);\n\n\n\nvar changeTracker = {};\nchangeTracker.onChange = Anchor.prototype.onChange;\nchangeTracker.setPosition = function(row, column) {\n    this.pos.row = row;\n    this.pos.column = column;\n};\nchangeTracker.update = function(pos, delta, $insertRight) {\n    this.$insertRight = $insertRight;\n    this.pos = pos; \n    this.onChange(delta);\n};\n\nvar movePoint = function(point, diff) {\n    if (point.row == 0)\n        point.column += diff.column;\n    point.row += diff.row;\n};\n\nvar moveRelative = function(point, start) {\n    if (point.row == start.row)\n        point.column -= start.column;\n    point.row -= start.row;\n};\n\n\nacequire(\"./lib/dom\").importCssString(\"\\\n.ace_snippet-marker {\\\n    -moz-box-sizing: border-box;\\\n    box-sizing: border-box;\\\n    background: rgba(194, 193, 208, 0.09);\\\n    border: 1px dotted rgba(211, 208, 235, 0.62);\\\n    position: absolute;\\\n}\");\n\nexports.snippetManager = new SnippetManager();\n\n\nvar Editor = acequire(\"./editor\").Editor;\n(function() {\n    this.insertSnippet = function(content, options) {\n        return exports.snippetManager.insertSnippet(this, content, options);\n    };\n    this.expandSnippet = function(options) {\n        return exports.snippetManager.expandWithTab(this, options);\n    };\n}).call(Editor.prototype);\n\n});\n\nace.define(\"ace/autocomplete/popup\",[\"require\",\"exports\",\"module\",\"ace/virtual_renderer\",\"ace/editor\",\"ace/range\",\"ace/lib/event\",\"ace/lib/lang\",\"ace/lib/dom\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Renderer = acequire(\"../virtual_renderer\").VirtualRenderer;\nvar Editor = acequire(\"../editor\").Editor;\nvar Range = acequire(\"../range\").Range;\nvar event = acequire(\"../lib/event\");\nvar lang = acequire(\"../lib/lang\");\nvar dom = acequire(\"../lib/dom\");\n\nvar $singleLineEditor = function(el) {\n    var renderer = new Renderer(el);\n\n    renderer.$maxLines = 4;\n\n    var editor = new Editor(renderer);\n\n    editor.setHighlightActiveLine(false);\n    editor.setShowPrintMargin(false);\n    editor.renderer.setShowGutter(false);\n    editor.renderer.setHighlightGutterLine(false);\n\n    editor.$mouseHandler.$focusWaitTimout = 0;\n    editor.$highlightTagPending = true;\n\n    return editor;\n};\n\nvar AcePopup = function(parentNode) {\n    var el = dom.createElement(\"div\");\n    var popup = new $singleLineEditor(el);\n\n    if (parentNode)\n        parentNode.appendChild(el);\n    el.style.display = \"none\";\n    popup.renderer.content.style.cursor = \"default\";\n    popup.renderer.setStyle(\"ace_autocomplete\");\n\n    popup.setOption(\"displayIndentGuides\", false);\n    popup.setOption(\"dragDelay\", 150);\n\n    var noop = function(){};\n\n    popup.focus = noop;\n    popup.$isFocused = true;\n\n    popup.renderer.$cursorLayer.restartTimer = noop;\n    popup.renderer.$cursorLayer.element.style.opacity = 0;\n\n    popup.renderer.$maxLines = 8;\n    popup.renderer.$keepTextAreaAtCursor = false;\n\n    popup.setHighlightActiveLine(false);\n    popup.session.highlight(\"\");\n    popup.session.$searchHighlight.clazz = \"ace_highlight-marker\";\n\n    popup.on(\"mousedown\", function(e) {\n        var pos = e.getDocumentPosition();\n        popup.selection.moveToPosition(pos);\n        selectionMarker.start.row = selectionMarker.end.row = pos.row;\n        e.stop();\n    });\n\n    var lastMouseEvent;\n    var hoverMarker = new Range(-1,0,-1,Infinity);\n    var selectionMarker = new Range(-1,0,-1,Infinity);\n    selectionMarker.id = popup.session.addMarker(selectionMarker, \"ace_active-line\", \"fullLine\");\n    popup.setSelectOnHover = function(val) {\n        if (!val) {\n            hoverMarker.id = popup.session.addMarker(hoverMarker, \"ace_line-hover\", \"fullLine\");\n        } else if (hoverMarker.id) {\n            popup.session.removeMarker(hoverMarker.id);\n            hoverMarker.id = null;\n        }\n    };\n    popup.setSelectOnHover(false);\n    popup.on(\"mousemove\", function(e) {\n        if (!lastMouseEvent) {\n            lastMouseEvent = e;\n            return;\n        }\n        if (lastMouseEvent.x == e.x && lastMouseEvent.y == e.y) {\n            return;\n        }\n        lastMouseEvent = e;\n        lastMouseEvent.scrollTop = popup.renderer.scrollTop;\n        var row = lastMouseEvent.getDocumentPosition().row;\n        if (hoverMarker.start.row != row) {\n            if (!hoverMarker.id)\n                popup.setRow(row);\n            setHoverMarker(row);\n        }\n    });\n    popup.renderer.on(\"beforeRender\", function() {\n        if (lastMouseEvent && hoverMarker.start.row != -1) {\n            lastMouseEvent.$pos = null;\n            var row = lastMouseEvent.getDocumentPosition().row;\n            if (!hoverMarker.id)\n                popup.setRow(row);\n            setHoverMarker(row, true);\n        }\n    });\n    popup.renderer.on(\"afterRender\", function() {\n        var row = popup.getRow();\n        var t = popup.renderer.$textLayer;\n        var selected = t.element.childNodes[row - t.config.firstRow];\n        if (selected == t.selectedNode)\n            return;\n        if (t.selectedNode)\n            dom.removeCssClass(t.selectedNode, \"ace_selected\");\n        t.selectedNode = selected;\n        if (selected)\n            dom.addCssClass(selected, \"ace_selected\");\n    });\n    var hideHoverMarker = function() { setHoverMarker(-1) };\n    var setHoverMarker = function(row, suppressRedraw) {\n        if (row !== hoverMarker.start.row) {\n            hoverMarker.start.row = hoverMarker.end.row = row;\n            if (!suppressRedraw)\n                popup.session._emit(\"changeBackMarker\");\n            popup._emit(\"changeHoverMarker\");\n        }\n    };\n    popup.getHoveredRow = function() {\n        return hoverMarker.start.row;\n    };\n\n    event.addListener(popup.container, \"mouseout\", hideHoverMarker);\n    popup.on(\"hide\", hideHoverMarker);\n    popup.on(\"changeSelection\", hideHoverMarker);\n\n    popup.session.doc.getLength = function() {\n        return popup.data.length;\n    };\n    popup.session.doc.getLine = function(i) {\n        var data = popup.data[i];\n        if (typeof data == \"string\")\n            return data;\n        return (data && data.value) || \"\";\n    };\n\n    var bgTokenizer = popup.session.bgTokenizer;\n    bgTokenizer.$tokenizeRow = function(row) {\n        var data = popup.data[row];\n        var tokens = [];\n        if (!data)\n            return tokens;\n        if (typeof data == \"string\")\n            data = {value: data};\n        if (!data.caption)\n            data.caption = data.value || data.name;\n\n        var last = -1;\n        var flag, c;\n        for (var i = 0; i < data.caption.length; i++) {\n            c = data.caption[i];\n            flag = data.matchMask & (1 << i) ? 1 : 0;\n            if (last !== flag) {\n                tokens.push({type: data.className || \"\" + ( flag ? \"completion-highlight\" : \"\"), value: c});\n                last = flag;\n            } else {\n                tokens[tokens.length - 1].value += c;\n            }\n        }\n\n        if (data.meta) {\n            var maxW = popup.renderer.$size.scrollerWidth / popup.renderer.layerConfig.characterWidth;\n            var metaData = data.meta;\n            if (metaData.length + data.caption.length > maxW - 2) {\n                metaData = metaData.substr(0, maxW - data.caption.length - 3) + \"\\u2026\"\n            }\n            tokens.push({type: \"rightAlignedText\", value: metaData});\n        }\n        return tokens;\n    };\n    bgTokenizer.$updateOnChange = noop;\n    bgTokenizer.start = noop;\n\n    popup.session.$computeWidth = function() {\n        return this.screenWidth = 0;\n    };\n\n    popup.$blockScrolling = Infinity;\n    popup.isOpen = false;\n    popup.isTopdown = false;\n\n    popup.data = [];\n    popup.setData = function(list) {\n        popup.setValue(lang.stringRepeat(\"\\n\", list.length), -1);\n        popup.data = list || [];\n        popup.setRow(0);\n    };\n    popup.getData = function(row) {\n        return popup.data[row];\n    };\n\n    popup.getRow = function() {\n        return selectionMarker.start.row;\n    };\n    popup.setRow = function(line) {\n        line = Math.max(0, Math.min(this.data.length, line));\n        if (selectionMarker.start.row != line) {\n            popup.selection.clearSelection();\n            selectionMarker.start.row = selectionMarker.end.row = line || 0;\n            popup.session._emit(\"changeBackMarker\");\n            popup.moveCursorTo(line || 0, 0);\n            if (popup.isOpen)\n                popup._signal(\"select\");\n        }\n    };\n\n    popup.on(\"changeSelection\", function() {\n        if (popup.isOpen)\n            popup.setRow(popup.selection.lead.row);\n        popup.renderer.scrollCursorIntoView();\n    });\n\n    popup.hide = function() {\n        this.container.style.display = \"none\";\n        this._signal(\"hide\");\n        popup.isOpen = false;\n    };\n    popup.show = function(pos, lineHeight, topdownOnly) {\n        var el = this.container;\n        var screenHeight = window.innerHeight;\n        var screenWidth = window.innerWidth;\n        var renderer = this.renderer;\n        var maxH = renderer.$maxLines * lineHeight * 1.4;\n        var top = pos.top + this.$borderSize;\n        var allowTopdown = top > screenHeight / 2 && !topdownOnly;\n        if (allowTopdown && top + lineHeight + maxH > screenHeight) {\n            renderer.$maxPixelHeight = top - 2 * this.$borderSize;\n            el.style.top = \"\";\n            el.style.bottom = screenHeight - top + \"px\";\n            popup.isTopdown = false;\n        } else {\n            top += lineHeight;\n            renderer.$maxPixelHeight = screenHeight - top - 0.2 * lineHeight;\n            el.style.top = top + \"px\";\n            el.style.bottom = \"\";\n            popup.isTopdown = true;\n        }\n\n        el.style.display = \"\";\n        this.renderer.$textLayer.checkForSizeChanges();\n\n        var left = pos.left;\n        if (left + el.offsetWidth > screenWidth)\n            left = screenWidth - el.offsetWidth;\n\n        el.style.left = left + \"px\";\n\n        this._signal(\"show\");\n        lastMouseEvent = null;\n        popup.isOpen = true;\n    };\n\n    popup.getTextLeftOffset = function() {\n        return this.$borderSize + this.renderer.$padding + this.$imageSize;\n    };\n\n    popup.$imageSize = 0;\n    popup.$borderSize = 1;\n\n    return popup;\n};\n\ndom.importCssString(\"\\\n.ace_editor.ace_autocomplete .ace_marker-layer .ace_active-line {\\\n    background-color: #CAD6FA;\\\n    z-index: 1;\\\n}\\\n.ace_editor.ace_autocomplete .ace_line-hover {\\\n    border: 1px solid #abbffe;\\\n    margin-top: -1px;\\\n    background: rgba(233,233,253,0.4);\\\n}\\\n.ace_editor.ace_autocomplete .ace_line-hover {\\\n    position: absolute;\\\n    z-index: 2;\\\n}\\\n.ace_editor.ace_autocomplete .ace_scroller {\\\n   background: none;\\\n   border: none;\\\n   box-shadow: none;\\\n}\\\n.ace_rightAlignedText {\\\n    color: gray;\\\n    display: inline-block;\\\n    position: absolute;\\\n    right: 4px;\\\n    text-align: right;\\\n    z-index: -1;\\\n}\\\n.ace_editor.ace_autocomplete .ace_completion-highlight{\\\n    color: #000;\\\n    text-shadow: 0 0 0.01em;\\\n}\\\n.ace_editor.ace_autocomplete {\\\n    width: 280px;\\\n    z-index: 200000;\\\n    background: #fbfbfb;\\\n    color: #444;\\\n    border: 1px lightgray solid;\\\n    position: fixed;\\\n    box-shadow: 2px 3px 5px rgba(0,0,0,.2);\\\n    line-height: 1.4;\\\n}\");\n\nexports.AcePopup = AcePopup;\n\n});\n\nace.define(\"ace/autocomplete/util\",[\"require\",\"exports\",\"module\"], function(acequire, exports, module) {\n\"use strict\";\n\nexports.parForEach = function(array, fn, callback) {\n    var completed = 0;\n    var arLength = array.length;\n    if (arLength === 0)\n        callback();\n    for (var i = 0; i < arLength; i++) {\n        fn(array[i], function(result, err) {\n            completed++;\n            if (completed === arLength)\n                callback(result, err);\n        });\n    }\n};\n\nvar ID_REGEX = /[a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF]/;\n\nexports.retrievePrecedingIdentifier = function(text, pos, regex) {\n    regex = regex || ID_REGEX;\n    var buf = [];\n    for (var i = pos-1; i >= 0; i--) {\n        if (regex.test(text[i]))\n            buf.push(text[i]);\n        else\n            break;\n    }\n    return buf.reverse().join(\"\");\n};\n\nexports.retrieveFollowingIdentifier = function(text, pos, regex) {\n    regex = regex || ID_REGEX;\n    var buf = [];\n    for (var i = pos; i < text.length; i++) {\n        if (regex.test(text[i]))\n            buf.push(text[i]);\n        else\n            break;\n    }\n    return buf;\n};\n\nexports.getCompletionPrefix = function (editor) {\n    var pos = editor.getCursorPosition();\n    var line = editor.session.getLine(pos.row);\n    var prefix;\n    editor.completers.forEach(function(completer) {\n        if (completer.identifierRegexps) {\n            completer.identifierRegexps.forEach(function(identifierRegex) {\n                if (!prefix && identifierRegex)\n                    prefix = this.retrievePrecedingIdentifier(line, pos.column, identifierRegex);\n            }.bind(this));\n        }\n    }.bind(this));\n    return prefix || this.retrievePrecedingIdentifier(line, pos.column);\n};\n\n});\n\nace.define(\"ace/autocomplete\",[\"require\",\"exports\",\"module\",\"ace/keyboard/hash_handler\",\"ace/autocomplete/popup\",\"ace/autocomplete/util\",\"ace/lib/event\",\"ace/lib/lang\",\"ace/lib/dom\",\"ace/snippets\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar HashHandler = acequire(\"./keyboard/hash_handler\").HashHandler;\nvar AcePopup = acequire(\"./autocomplete/popup\").AcePopup;\nvar util = acequire(\"./autocomplete/util\");\nvar event = acequire(\"./lib/event\");\nvar lang = acequire(\"./lib/lang\");\nvar dom = acequire(\"./lib/dom\");\nvar snippetManager = acequire(\"./snippets\").snippetManager;\n\nvar Autocomplete = function() {\n    this.autoInsert = false;\n    this.autoSelect = true;\n    this.exactMatch = false;\n    this.gatherCompletionsId = 0;\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys(this.commands);\n\n    this.blurListener = this.blurListener.bind(this);\n    this.changeListener = this.changeListener.bind(this);\n    this.mousedownListener = this.mousedownListener.bind(this);\n    this.mousewheelListener = this.mousewheelListener.bind(this);\n\n    this.changeTimer = lang.delayedCall(function() {\n        this.updateCompletions(true);\n    }.bind(this));\n\n    this.tooltipTimer = lang.delayedCall(this.updateDocTooltip.bind(this), 50);\n};\n\n(function() {\n\n    this.$init = function() {\n        this.popup = new AcePopup(document.body || document.documentElement);\n        this.popup.on(\"click\", function(e) {\n            this.insertMatch();\n            e.stop();\n        }.bind(this));\n        this.popup.focus = this.editor.focus.bind(this.editor);\n        this.popup.on(\"show\", this.tooltipTimer.bind(null, null));\n        this.popup.on(\"select\", this.tooltipTimer.bind(null, null));\n        this.popup.on(\"changeHoverMarker\", this.tooltipTimer.bind(null, null));\n        return this.popup;\n    };\n\n    this.getPopup = function() {\n        return this.popup || this.$init();\n    };\n\n    this.openPopup = function(editor, prefix, keepPopupPosition) {\n        if (!this.popup)\n            this.$init();\n\n        this.popup.setData(this.completions.filtered);\n\n        editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n        \n        var renderer = editor.renderer;\n        this.popup.setRow(this.autoSelect ? 0 : -1);\n        if (!keepPopupPosition) {\n            this.popup.setTheme(editor.getTheme());\n            this.popup.setFontSize(editor.getFontSize());\n\n            var lineHeight = renderer.layerConfig.lineHeight;\n\n            var pos = renderer.$cursorLayer.getPixelPosition(this.base, true);\n            pos.left -= this.popup.getTextLeftOffset();\n\n            var rect = editor.container.getBoundingClientRect();\n            pos.top += rect.top - renderer.layerConfig.offset;\n            pos.left += rect.left - editor.renderer.scrollLeft;\n            pos.left += renderer.gutterWidth;\n\n            this.popup.show(pos, lineHeight);\n        } else if (keepPopupPosition && !prefix) {\n            this.detach();\n        }\n    };\n\n    this.detach = function() {\n        this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n        this.editor.off(\"changeSelection\", this.changeListener);\n        this.editor.off(\"blur\", this.blurListener);\n        this.editor.off(\"mousedown\", this.mousedownListener);\n        this.editor.off(\"mousewheel\", this.mousewheelListener);\n        this.changeTimer.cancel();\n        this.hideDocTooltip();\n\n        this.gatherCompletionsId += 1;\n        if (this.popup && this.popup.isOpen)\n            this.popup.hide();\n\n        if (this.base)\n            this.base.detach();\n        this.activated = false;\n        this.completions = this.base = null;\n    };\n\n    this.changeListener = function(e) {\n        var cursor = this.editor.selection.lead;\n        if (cursor.row != this.base.row || cursor.column < this.base.column) {\n            this.detach();\n        }\n        if (this.activated)\n            this.changeTimer.schedule();\n        else\n            this.detach();\n    };\n\n    this.blurListener = function(e) {\n        if (e.relatedTarget && e.relatedTarget.nodeName == \"A\" && e.relatedTarget.href) {\n            window.open(e.relatedTarget.href, \"_blank\");\n        }\n        var el = document.activeElement;\n        var text = this.editor.textInput.getElement();\n        var fromTooltip = e.relatedTarget && e.relatedTarget == this.tooltipNode;\n        var container = this.popup && this.popup.container;\n        if (el != text && el.parentNode != container && !fromTooltip\n            && el != this.tooltipNode && e.relatedTarget != text\n        ) {\n            this.detach();\n        }\n    };\n\n    this.mousedownListener = function(e) {\n        this.detach();\n    };\n\n    this.mousewheelListener = function(e) {\n        this.detach();\n    };\n\n    this.goTo = function(where) {\n        var row = this.popup.getRow();\n        var max = this.popup.session.getLength() - 1;\n\n        switch(where) {\n            case \"up\": row = row <= 0 ? max : row - 1; break;\n            case \"down\": row = row >= max ? -1 : row + 1; break;\n            case \"start\": row = 0; break;\n            case \"end\": row = max; break;\n        }\n\n        this.popup.setRow(row);\n    };\n\n    this.insertMatch = function(data, options) {\n        if (!data)\n            data = this.popup.getData(this.popup.getRow());\n        if (!data)\n            return false;\n\n        if (data.completer && data.completer.insertMatch) {\n            data.completer.insertMatch(this.editor, data);\n        } else {\n            if (this.completions.filterText) {\n                var ranges = this.editor.selection.getAllRanges();\n                for (var i = 0, range; range = ranges[i]; i++) {\n                    range.start.column -= this.completions.filterText.length;\n                    this.editor.session.remove(range);\n                }\n            }\n            if (data.snippet)\n                snippetManager.insertSnippet(this.editor, data.snippet);\n            else\n                this.editor.execCommand(\"insertstring\", data.value || data);\n        }\n        this.detach();\n    };\n\n\n    this.commands = {\n        \"Up\": function(editor) { editor.completer.goTo(\"up\"); },\n        \"Down\": function(editor) { editor.completer.goTo(\"down\"); },\n        \"Ctrl-Up|Ctrl-Home\": function(editor) { editor.completer.goTo(\"start\"); },\n        \"Ctrl-Down|Ctrl-End\": function(editor) { editor.completer.goTo(\"end\"); },\n\n        \"Esc\": function(editor) { editor.completer.detach(); },\n        \"Return\": function(editor) { return editor.completer.insertMatch(); },\n        \"Shift-Return\": function(editor) { editor.completer.insertMatch(null, {deleteSuffix: true}); },\n        \"Tab\": function(editor) {\n            var result = editor.completer.insertMatch();\n            if (!result && !editor.tabstopManager)\n                editor.completer.goTo(\"down\");\n            else\n                return result;\n        },\n\n        \"PageUp\": function(editor) { editor.completer.popup.gotoPageUp(); },\n        \"PageDown\": function(editor) { editor.completer.popup.gotoPageDown(); }\n    };\n\n    this.gatherCompletions = function(editor, callback) {\n        var session = editor.getSession();\n        var pos = editor.getCursorPosition();\n\n        var line = session.getLine(pos.row);\n        var prefix = util.getCompletionPrefix(editor);\n\n        this.base = session.doc.createAnchor(pos.row, pos.column - prefix.length);\n        this.base.$insertRight = true;\n\n        var matches = [];\n        var total = editor.completers.length;\n        editor.completers.forEach(function(completer, i) {\n            completer.getCompletions(editor, session, pos, prefix, function(err, results) {\n                if (!err && results)\n                    matches = matches.concat(results);\n                var pos = editor.getCursorPosition();\n                var line = session.getLine(pos.row);\n                callback(null, {\n                    prefix: prefix,\n                    matches: matches,\n                    finished: (--total === 0)\n                });\n            });\n        });\n        return true;\n    };\n\n    this.showPopup = function(editor) {\n        if (this.editor)\n            this.detach();\n\n        this.activated = true;\n\n        this.editor = editor;\n        if (editor.completer != this) {\n            if (editor.completer)\n                editor.completer.detach();\n            editor.completer = this;\n        }\n\n        editor.on(\"changeSelection\", this.changeListener);\n        editor.on(\"blur\", this.blurListener);\n        editor.on(\"mousedown\", this.mousedownListener);\n        editor.on(\"mousewheel\", this.mousewheelListener);\n\n        this.updateCompletions();\n    };\n\n    this.updateCompletions = function(keepPopupPosition) {\n        if (keepPopupPosition && this.base && this.completions) {\n            var pos = this.editor.getCursorPosition();\n            var prefix = this.editor.session.getTextRange({start: this.base, end: pos});\n            if (prefix == this.completions.filterText)\n                return;\n            this.completions.setFilter(prefix);\n            if (!this.completions.filtered.length)\n                return this.detach();\n            if (this.completions.filtered.length == 1\n            && this.completions.filtered[0].value == prefix\n            && !this.completions.filtered[0].snippet)\n                return this.detach();\n            this.openPopup(this.editor, prefix, keepPopupPosition);\n            return;\n        }\n        var _id = this.gatherCompletionsId;\n        this.gatherCompletions(this.editor, function(err, results) {\n            var detachIfFinished = function() {\n                if (!results.finished) return;\n                return this.detach();\n            }.bind(this);\n\n            var prefix = results.prefix;\n            var matches = results && results.matches;\n\n            if (!matches || !matches.length)\n                return detachIfFinished();\n            if (prefix.indexOf(results.prefix) !== 0 || _id != this.gatherCompletionsId)\n                return;\n\n            this.completions = new FilteredList(matches);\n\n            if (this.exactMatch)\n                this.completions.exactMatch = true;\n\n            this.completions.setFilter(prefix);\n            var filtered = this.completions.filtered;\n            if (!filtered.length)\n                return detachIfFinished();\n            if (filtered.length == 1 && filtered[0].value == prefix && !filtered[0].snippet)\n                return detachIfFinished();\n            if (this.autoInsert && filtered.length == 1 && results.finished)\n                return this.insertMatch(filtered[0]);\n\n            this.openPopup(this.editor, prefix, keepPopupPosition);\n        }.bind(this));\n    };\n\n    this.cancelContextMenu = function() {\n        this.editor.$mouseHandler.cancelContextMenu();\n    };\n\n    this.updateDocTooltip = function() {\n        var popup = this.popup;\n        var all = popup.data;\n        var selected = all && (all[popup.getHoveredRow()] || all[popup.getRow()]);\n        var doc = null;\n        if (!selected || !this.editor || !this.popup.isOpen)\n            return this.hideDocTooltip();\n        this.editor.completers.some(function(completer) {\n            if (completer.getDocTooltip)\n                doc = completer.getDocTooltip(selected);\n            return doc;\n        });\n        if (!doc)\n            doc = selected;\n\n        if (typeof doc == \"string\")\n            doc = {docText: doc};\n        if (!doc || !(doc.docHTML || doc.docText))\n            return this.hideDocTooltip();\n        this.showDocTooltip(doc);\n    };\n\n    this.showDocTooltip = function(item) {\n        if (!this.tooltipNode) {\n            this.tooltipNode = dom.createElement(\"div\");\n            this.tooltipNode.className = \"ace_tooltip ace_doc-tooltip\";\n            this.tooltipNode.style.margin = 0;\n            this.tooltipNode.style.pointerEvents = \"auto\";\n            this.tooltipNode.tabIndex = -1;\n            this.tooltipNode.onblur = this.blurListener.bind(this);\n        }\n\n        var tooltipNode = this.tooltipNode;\n        if (item.docHTML) {\n            tooltipNode.innerHTML = item.docHTML;\n        } else if (item.docText) {\n            tooltipNode.textContent = item.docText;\n        }\n\n        if (!tooltipNode.parentNode)\n            document.body.appendChild(tooltipNode);\n        var popup = this.popup;\n        var rect = popup.container.getBoundingClientRect();\n        tooltipNode.style.top = popup.container.style.top;\n        tooltipNode.style.bottom = popup.container.style.bottom;\n\n        if (window.innerWidth - rect.right < 320) {\n            tooltipNode.style.right = window.innerWidth - rect.left + \"px\";\n            tooltipNode.style.left = \"\";\n        } else {\n            tooltipNode.style.left = (rect.right + 1) + \"px\";\n            tooltipNode.style.right = \"\";\n        }\n        tooltipNode.style.display = \"block\";\n    };\n\n    this.hideDocTooltip = function() {\n        this.tooltipTimer.cancel();\n        if (!this.tooltipNode) return;\n        var el = this.tooltipNode;\n        if (!this.editor.isFocused() && document.activeElement == el)\n            this.editor.focus();\n        this.tooltipNode = null;\n        if (el.parentNode)\n            el.parentNode.removeChild(el);\n    };\n\n}).call(Autocomplete.prototype);\n\nAutocomplete.startCommand = {\n    name: \"startAutocomplete\",\n    exec: function(editor) {\n        if (!editor.completer)\n            editor.completer = new Autocomplete();\n        editor.completer.autoInsert = false;\n        editor.completer.autoSelect = true;\n        editor.completer.showPopup(editor);\n        editor.completer.cancelContextMenu();\n    },\n    bindKey: \"Ctrl-Space|Ctrl-Shift-Space|Alt-Space\"\n};\n\nvar FilteredList = function(array, filterText) {\n    this.all = array;\n    this.filtered = array;\n    this.filterText = filterText || \"\";\n    this.exactMatch = false;\n};\n(function(){\n    this.setFilter = function(str) {\n        if (str.length > this.filterText && str.lastIndexOf(this.filterText, 0) === 0)\n            var matches = this.filtered;\n        else\n            var matches = this.all;\n\n        this.filterText = str;\n        matches = this.filterCompletions(matches, this.filterText);\n        matches = matches.sort(function(a, b) {\n            return b.exactMatch - a.exactMatch || b.score - a.score;\n        });\n        var prev = null;\n        matches = matches.filter(function(item){\n            var caption = item.snippet || item.caption || item.value;\n            if (caption === prev) return false;\n            prev = caption;\n            return true;\n        });\n\n        this.filtered = matches;\n    };\n    this.filterCompletions = function(items, needle) {\n        var results = [];\n        var upper = needle.toUpperCase();\n        var lower = needle.toLowerCase();\n        loop: for (var i = 0, item; item = items[i]; i++) {\n            var caption = item.value || item.caption || item.snippet;\n            if (!caption) continue;\n            var lastIndex = -1;\n            var matchMask = 0;\n            var penalty = 0;\n            var index, distance;\n\n            if (this.exactMatch) {\n                if (needle !== caption.substr(0, needle.length))\n                    continue loop;\n            }else{\n                for (var j = 0; j < needle.length; j++) {\n                    var i1 = caption.indexOf(lower[j], lastIndex + 1);\n                    var i2 = caption.indexOf(upper[j], lastIndex + 1);\n                    index = (i1 >= 0) ? ((i2 < 0 || i1 < i2) ? i1 : i2) : i2;\n                    if (index < 0)\n                        continue loop;\n                    distance = index - lastIndex - 1;\n                    if (distance > 0) {\n                        if (lastIndex === -1)\n                            penalty += 10;\n                        penalty += distance;\n                    }\n                    matchMask = matchMask | (1 << index);\n                    lastIndex = index;\n                }\n            }\n            item.matchMask = matchMask;\n            item.exactMatch = penalty ? 0 : 1;\n            item.score = (item.score || 0) - penalty;\n            results.push(item);\n        }\n        return results;\n    };\n}).call(FilteredList.prototype);\n\nexports.Autocomplete = Autocomplete;\nexports.FilteredList = FilteredList;\n\n});\n\nace.define(\"ace/autocomplete/text_completer\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n    var Range = acequire(\"../range\").Range;\n    \n    var splitRegex = /[^a-zA-Z_0-9\\$\\-\\u00C0-\\u1FFF\\u2C00-\\uD7FF\\w]+/;\n\n    function getWordIndex(doc, pos) {\n        var textBefore = doc.getTextRange(Range.fromPoints({row: 0, column:0}, pos));\n        return textBefore.split(splitRegex).length - 1;\n    }\n    function wordDistance(doc, pos) {\n        var prefixPos = getWordIndex(doc, pos);\n        var words = doc.getValue().split(splitRegex);\n        var wordScores = Object.create(null);\n        \n        var currentWord = words[prefixPos];\n\n        words.forEach(function(word, idx) {\n            if (!word || word === currentWord) return;\n\n            var distance = Math.abs(prefixPos - idx);\n            var score = words.length - distance;\n            if (wordScores[word]) {\n                wordScores[word] = Math.max(score, wordScores[word]);\n            } else {\n                wordScores[word] = score;\n            }\n        });\n        return wordScores;\n    }\n\n    exports.getCompletions = function(editor, session, pos, prefix, callback) {\n        var wordScore = wordDistance(session, pos, prefix);\n        var wordList = Object.keys(wordScore);\n        callback(null, wordList.map(function(word) {\n            return {\n                caption: word,\n                value: word,\n                score: wordScore[word],\n                meta: \"local\"\n            };\n        }));\n    };\n});\n\nace.define(\"ace/ext/language_tools\",[\"require\",\"exports\",\"module\",\"ace/snippets\",\"ace/autocomplete\",\"ace/config\",\"ace/lib/lang\",\"ace/autocomplete/util\",\"ace/autocomplete/text_completer\",\"ace/editor\",\"ace/config\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar snippetManager = acequire(\"../snippets\").snippetManager;\nvar Autocomplete = acequire(\"../autocomplete\").Autocomplete;\nvar config = acequire(\"../config\");\nvar lang = acequire(\"../lib/lang\");\nvar util = acequire(\"../autocomplete/util\");\n\nvar textCompleter = acequire(\"../autocomplete/text_completer\");\nvar keyWordCompleter = {\n    getCompletions: function(editor, session, pos, prefix, callback) {\n        if (session.$mode.completer) {\n            return session.$mode.completer.getCompletions(editor, session, pos, prefix, callback);\n        }\n        var state = editor.session.getState(pos.row);\n        var completions = session.$mode.getCompletions(state, session, pos, prefix);\n        callback(null, completions);\n    }\n};\n\nvar snippetCompleter = {\n    getCompletions: function(editor, session, pos, prefix, callback) {\n        var snippetMap = snippetManager.snippetMap;\n        var completions = [];\n        snippetManager.getActiveScopes(editor).forEach(function(scope) {\n            var snippets = snippetMap[scope] || [];\n            for (var i = snippets.length; i--;) {\n                var s = snippets[i];\n                var caption = s.name || s.tabTrigger;\n                if (!caption)\n                    continue;\n                completions.push({\n                    caption: caption,\n                    snippet: s.content,\n                    meta: s.tabTrigger && !s.name ? s.tabTrigger + \"\\u21E5 \" : \"snippet\",\n                    type: \"snippet\"\n                });\n            }\n        }, this);\n        callback(null, completions);\n    },\n    getDocTooltip: function(item) {\n        if (item.type == \"snippet\" && !item.docHTML) {\n            item.docHTML = [\n                \"<b>\", lang.escapeHTML(item.caption), \"</b>\", \"<hr></hr>\",\n                lang.escapeHTML(item.snippet)\n            ].join(\"\");\n        }\n    }\n};\n\nvar completers = [snippetCompleter, textCompleter, keyWordCompleter];\nexports.setCompleters = function(val) {\n    completers.length = 0;\n    if (val) completers.push.apply(completers, val);\n};\nexports.addCompleter = function(completer) {\n    completers.push(completer);\n};\nexports.textCompleter = textCompleter;\nexports.keyWordCompleter = keyWordCompleter;\nexports.snippetCompleter = snippetCompleter;\n\nvar expandSnippet = {\n    name: \"expandSnippet\",\n    exec: function(editor) {\n        return snippetManager.expandWithTab(editor);\n    },\n    bindKey: \"Tab\"\n};\n\nvar onChangeMode = function(e, editor) {\n    loadSnippetsForMode(editor.session.$mode);\n};\n\nvar loadSnippetsForMode = function(mode) {\n    var id = mode.$id;\n    if (!snippetManager.files)\n        snippetManager.files = {};\n    loadSnippetFile(id);\n    if (mode.modes)\n        mode.modes.forEach(loadSnippetsForMode);\n};\n\nvar loadSnippetFile = function(id) {\n    if (!id || snippetManager.files[id])\n        return;\n    var snippetFilePath = id.replace(\"mode\", \"snippets\");\n    snippetManager.files[id] = {};\n    config.loadModule(snippetFilePath, function(m) {\n        if (m) {\n            snippetManager.files[id] = m;\n            if (!m.snippets && m.snippetText)\n                m.snippets = snippetManager.parseSnippetFile(m.snippetText);\n            snippetManager.register(m.snippets || [], m.scope);\n            if (m.includeScopes) {\n                snippetManager.snippetMap[m.scope].includeScopes = m.includeScopes;\n                m.includeScopes.forEach(function(x) {\n                    loadSnippetFile(\"ace/mode/\" + x);\n                });\n            }\n        }\n    });\n};\n\nvar doLiveAutocomplete = function(e) {\n    var editor = e.editor;\n    var hasCompleter = editor.completer && editor.completer.activated;\n    if (e.command.name === \"backspace\") {\n        if (hasCompleter && !util.getCompletionPrefix(editor))\n            editor.completer.detach();\n    }\n    else if (e.command.name === \"insertstring\") {\n        var prefix = util.getCompletionPrefix(editor);\n        if (prefix && !hasCompleter) {\n            if (!editor.completer) {\n                editor.completer = new Autocomplete();\n            }\n            editor.completer.autoInsert = false;\n            editor.completer.showPopup(editor);\n        }\n    }\n};\n\nvar Editor = acequire(\"../editor\").Editor;\nacequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    enableBasicAutocompletion: {\n        set: function(val) {\n            if (val) {\n                if (!this.completers)\n                    this.completers = Array.isArray(val)? val: completers;\n                this.commands.addCommand(Autocomplete.startCommand);\n            } else {\n                this.commands.removeCommand(Autocomplete.startCommand);\n            }\n        },\n        value: false\n    },\n    enableLiveAutocompletion: {\n        set: function(val) {\n            if (val) {\n                if (!this.completers)\n                    this.completers = Array.isArray(val)? val: completers;\n                this.commands.on('afterExec', doLiveAutocomplete);\n            } else {\n                this.commands.removeListener('afterExec', doLiveAutocomplete);\n            }\n        },\n        value: false\n    },\n    enableSnippets: {\n        set: function(val) {\n            if (val) {\n                this.commands.addCommand(expandSnippet);\n                this.on(\"changeMode\", onChangeMode);\n                onChangeMode(null, this);\n            } else {\n                this.commands.removeCommand(expandSnippet);\n                this.off(\"changeMode\", onChangeMode);\n            }\n        },\n        value: false\n    }\n});\n});\n                (function() {\n                    ace.acequire([\"ace/ext/language_tools\"], function() {});\n                })();\n            \n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/3.d998111d.chunk.js","ace.define(\"ace/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/event_emitter\",\"ace/lib/lang\",\"ace/range\",\"ace/anchor\",\"ace/keyboard/hash_handler\",\"ace/tokenizer\",\"ace/lib/dom\",\"ace/editor\"], function(acequire, exports, module) {\n\"use strict\";\nvar oop = acequire(\"./lib/oop\");\nvar EventEmitter = acequire(\"./lib/event_emitter\").EventEmitter;\nvar lang = acequire(\"./lib/lang\");\nvar Range = acequire(\"./range\").Range;\nvar Anchor = acequire(\"./anchor\").Anchor;\nvar HashHandler = acequire(\"./keyboard/hash_handler\").HashHandler;\nvar Tokenizer = acequire(\"./tokenizer\").Tokenizer;\nvar comparePoints = Range.comparePoints;\n\nvar SnippetManager = function() {\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n};\n\n(function() {\n    oop.implement(this, EventEmitter);\n    \n    this.getTokenizer = function() {\n        function TabstopToken(str, _, stack) {\n            str = str.substr(1);\n            if (/^\\d+$/.test(str) && !stack.inFormatString)\n                return [{tabstopId: parseInt(str, 10)}];\n            return [{text: str}];\n        }\n        function escape(ch) {\n            return \"(?:[^\\\\\\\\\" + ch + \"]|\\\\\\\\.)\";\n        }\n        SnippetManager.$tokenizer = new Tokenizer({\n            start: [\n                {regex: /:/, onMatch: function(val, state, stack) {\n                    if (stack.length && stack[0].expectIf) {\n                        stack[0].expectIf = false;\n                        stack[0].elseBranch = stack[0];\n                        return [stack[0]];\n                    }\n                    return \":\";\n                }},\n                {regex: /\\\\./, onMatch: function(val, state, stack) {\n                    var ch = val[1];\n                    if (ch == \"}\" && stack.length) {\n                        val = ch;\n                    }else if (\"`$\\\\\".indexOf(ch) != -1) {\n                        val = ch;\n                    } else if (stack.inFormatString) {\n                        if (ch == \"n\")\n                            val = \"\\n\";\n                        else if (ch == \"t\")\n                            val = \"\\n\";\n                        else if (\"ulULE\".indexOf(ch) != -1) {\n                            val = {changeCase: ch, local: ch > \"a\"};\n                        }\n                    }\n\n                    return [val];\n                }},\n                {regex: /}/, onMatch: function(val, state, stack) {\n                    return [stack.length ? stack.shift() : val];\n                }},\n                {regex: /\\$(?:\\d+|\\w+)/, onMatch: TabstopToken},\n                {regex: /\\$\\{[\\dA-Z_a-z]+/, onMatch: function(str, state, stack) {\n                    var t = TabstopToken(str.substr(1), state, stack);\n                    stack.unshift(t[0]);\n                    return t;\n                }, next: \"snippetVar\"},\n                {regex: /\\n/, token: \"newline\", merge: false}\n            ],\n            snippetVar: [\n                {regex: \"\\\\|\" + escape(\"\\\\|\") + \"*\\\\|\", onMatch: function(val, state, stack) {\n                    stack[0].choices = val.slice(1, -1).split(\",\");\n                }, next: \"start\"},\n                {regex: \"/(\" + escape(\"/\") + \"+)/(?:(\" + escape(\"/\") + \"*)/)(\\\\w*):?\",\n                 onMatch: function(val, state, stack) {\n                    var ts = stack[0];\n                    ts.fmtString = val;\n\n                    val = this.splitRegex.exec(val);\n                    ts.guard = val[1];\n                    ts.fmt = val[2];\n                    ts.flag = val[3];\n                    return \"\";\n                }, next: \"start\"},\n                {regex: \"`\" + escape(\"`\") + \"*`\", onMatch: function(val, state, stack) {\n                    stack[0].code = val.splice(1, -1);\n                    return \"\";\n                }, next: \"start\"},\n                {regex: \"\\\\?\", onMatch: function(val, state, stack) {\n                    if (stack[0])\n                        stack[0].expectIf = true;\n                }, next: \"start\"},\n                {regex: \"([^:}\\\\\\\\]|\\\\\\\\.)*:?\", token: \"\", next: \"start\"}\n            ],\n            formatString: [\n                {regex: \"/(\" + escape(\"/\") + \"+)/\", token: \"regex\"},\n                {regex: \"\", onMatch: function(val, state, stack) {\n                    stack.inFormatString = true;\n                }, next: \"start\"}\n            ]\n        });\n        SnippetManager.prototype.getTokenizer = function() {\n            return SnippetManager.$tokenizer;\n        };\n        return SnippetManager.$tokenizer;\n    };\n\n    this.tokenizeTmSnippet = function(str, startState) {\n        return this.getTokenizer().getLineTokens(str, startState).tokens.map(function(x) {\n            return x.value || x;\n        });\n    };\n\n    this.$getDefaultValue = function(editor, name) {\n        if (/^[A-Z]\\d+$/.test(name)) {\n            var i = name.substr(1);\n            return (this.variables[name[0] + \"__\"] || {})[i];\n        }\n        if (/^\\d+$/.test(name)) {\n            return (this.variables.__ || {})[name];\n        }\n        name = name.replace(/^TM_/, \"\");\n\n        if (!editor)\n            return;\n        var s = editor.session;\n        switch(name) {\n            case \"CURRENT_WORD\":\n                var r = s.getWordRange();\n            case \"SELECTION\":\n            case \"SELECTED_TEXT\":\n                return s.getTextRange(r);\n            case \"CURRENT_LINE\":\n                return s.getLine(editor.getCursorPosition().row);\n            case \"PREV_LINE\": // not possible in textmate\n                return s.getLine(editor.getCursorPosition().row - 1);\n            case \"LINE_INDEX\":\n                return editor.getCursorPosition().column;\n            case \"LINE_NUMBER\":\n                return editor.getCursorPosition().row + 1;\n            case \"SOFT_TABS\":\n                return s.getUseSoftTabs() ? \"YES\" : \"NO\";\n            case \"TAB_SIZE\":\n                return s.getTabSize();\n            case \"FILENAME\":\n            case \"FILEPATH\":\n                return \"\";\n            case \"FULLNAME\":\n                return \"Ace\";\n        }\n    };\n    this.variables = {};\n    this.getVariableValue = function(editor, varName) {\n        if (this.variables.hasOwnProperty(varName))\n            return this.variables[varName](editor, varName) || \"\";\n        return this.$getDefaultValue(editor, varName) || \"\";\n    };\n    this.tmStrFormat = function(str, ch, editor) {\n        var flag = ch.flag || \"\";\n        var re = ch.guard;\n        re = new RegExp(re, flag.replace(/[^gi]/, \"\"));\n        var fmtTokens = this.tokenizeTmSnippet(ch.fmt, \"formatString\");\n        var _self = this;\n        var formatted = str.replace(re, function() {\n            _self.variables.__ = arguments;\n            var fmtParts = _self.resolveVariables(fmtTokens, editor);\n            var gChangeCase = \"E\";\n            for (var i  = 0; i < fmtParts.length; i++) {\n                var ch = fmtParts[i];\n                if (typeof ch == \"object\") {\n                    fmtParts[i] = \"\";\n                    if (ch.changeCase && ch.local) {\n                        var next = fmtParts[i + 1];\n                        if (next && typeof next == \"string\") {\n                            if (ch.changeCase == \"u\")\n                                fmtParts[i] = next[0].toUpperCase();\n                            else\n                                fmtParts[i] = next[0].toLowerCase();\n                            fmtParts[i + 1] = next.substr(1);\n                        }\n                    } else if (ch.changeCase) {\n                        gChangeCase = ch.changeCase;\n                    }\n                } else if (gChangeCase == \"U\") {\n                    fmtParts[i] = ch.toUpperCase();\n                } else if (gChangeCase == \"L\") {\n                    fmtParts[i] = ch.toLowerCase();\n                }\n            }\n            return fmtParts.join(\"\");\n        });\n        this.variables.__ = null;\n        return formatted;\n    };\n\n    this.resolveVariables = function(snippet, editor) {\n        var result = [];\n        for (var i = 0; i < snippet.length; i++) {\n            var ch = snippet[i];\n            if (typeof ch == \"string\") {\n                result.push(ch);\n            } else if (typeof ch != \"object\") {\n                continue;\n            } else if (ch.skip) {\n                gotoNext(ch);\n            } else if (ch.processed < i) {\n                continue;\n            } else if (ch.text) {\n                var value = this.getVariableValue(editor, ch.text);\n                if (value && ch.fmtString)\n                    value = this.tmStrFormat(value, ch);\n                ch.processed = i;\n                if (ch.expectIf == null) {\n                    if (value) {\n                        result.push(value);\n                        gotoNext(ch);\n                    }\n                } else {\n                    if (value) {\n                        ch.skip = ch.elseBranch;\n                    } else\n                        gotoNext(ch);\n                }\n            } else if (ch.tabstopId != null) {\n                result.push(ch);\n            } else if (ch.changeCase != null) {\n                result.push(ch);\n            }\n        }\n        function gotoNext(ch) {\n            var i1 = snippet.indexOf(ch, i + 1);\n            if (i1 != -1)\n                i = i1;\n        }\n        return result;\n    };\n\n    this.insertSnippetForSelection = function(editor, snippetText) {\n        var cursor = editor.getCursorPosition();\n        var line = editor.session.getLine(cursor.row);\n        var tabString = editor.session.getTabString();\n        var indentString = line.match(/^\\s*/)[0];\n        \n        if (cursor.column < indentString.length)\n            indentString = indentString.slice(0, cursor.column);\n\n        snippetText = snippetText.replace(/\\r/g, \"\");\n        var tokens = this.tokenizeTmSnippet(snippetText);\n        tokens = this.resolveVariables(tokens, editor);\n        tokens = tokens.map(function(x) {\n            if (x == \"\\n\")\n                return x + indentString;\n            if (typeof x == \"string\")\n                return x.replace(/\\t/g, tabString);\n            return x;\n        });\n        var tabstops = [];\n        tokens.forEach(function(p, i) {\n            if (typeof p != \"object\")\n                return;\n            var id = p.tabstopId;\n            var ts = tabstops[id];\n            if (!ts) {\n                ts = tabstops[id] = [];\n                ts.index = id;\n                ts.value = \"\";\n            }\n            if (ts.indexOf(p) !== -1)\n                return;\n            ts.push(p);\n            var i1 = tokens.indexOf(p, i + 1);\n            if (i1 === -1)\n                return;\n\n            var value = tokens.slice(i + 1, i1);\n            var isNested = value.some(function(t) {return typeof t === \"object\"});          \n            if (isNested && !ts.value) {\n                ts.value = value;\n            } else if (value.length && (!ts.value || typeof ts.value !== \"string\")) {\n                ts.value = value.join(\"\");\n            }\n        });\n        tabstops.forEach(function(ts) {ts.length = 0});\n        var expanding = {};\n        function copyValue(val) {\n            var copy = [];\n            for (var i = 0; i < val.length; i++) {\n                var p = val[i];\n                if (typeof p == \"object\") {\n                    if (expanding[p.tabstopId])\n                        continue;\n                    var j = val.lastIndexOf(p, i - 1);\n                    p = copy[j] || {tabstopId: p.tabstopId};\n                }\n                copy[i] = p;\n            }\n            return copy;\n        }\n        for (var i = 0; i < tokens.length; i++) {\n            var p = tokens[i];\n            if (typeof p != \"object\")\n                continue;\n            var id = p.tabstopId;\n            var i1 = tokens.indexOf(p, i + 1);\n            if (expanding[id]) {\n                if (expanding[id] === p)\n                    expanding[id] = null;\n                continue;\n            }\n            \n            var ts = tabstops[id];\n            var arg = typeof ts.value == \"string\" ? [ts.value] : copyValue(ts.value);\n            arg.unshift(i + 1, Math.max(0, i1 - i));\n            arg.push(p);\n            expanding[id] = p;\n            tokens.splice.apply(tokens, arg);\n\n            if (ts.indexOf(p) === -1)\n                ts.push(p);\n        }\n        var row = 0, column = 0;\n        var text = \"\";\n        tokens.forEach(function(t) {\n            if (typeof t === \"string\") {\n                var lines = t.split(\"\\n\");\n                if (lines.length > 1){\n                    column = lines[lines.length - 1].length;\n                    row += lines.length - 1;\n                } else\n                    column += t.length;\n                text += t;\n            } else {\n                if (!t.start)\n                    t.start = {row: row, column: column};\n                else\n                    t.end = {row: row, column: column};\n            }\n        });\n        var range = editor.getSelectionRange();\n        var end = editor.session.replace(range, text);\n\n        var tabstopManager = new TabstopManager(editor);\n        var selectionId = editor.inVirtualSelectionMode && editor.selection.index;\n        tabstopManager.addTabstops(tabstops, range.start, end, selectionId);\n    };\n    \n    this.insertSnippet = function(editor, snippetText) {\n        var self = this;\n        if (editor.inVirtualSelectionMode)\n            return self.insertSnippetForSelection(editor, snippetText);\n        \n        editor.forEachSelection(function() {\n            self.insertSnippetForSelection(editor, snippetText);\n        }, null, {keepOrder: true});\n        \n        if (editor.tabstopManager)\n            editor.tabstopManager.tabNext();\n    };\n\n    this.$getScope = function(editor) {\n        var scope = editor.session.$mode.$id || \"\";\n        scope = scope.split(\"/\").pop();\n        if (scope === \"html\" || scope === \"php\") {\n            if (scope === \"php\" && !editor.session.$mode.inlinePhp) \n                scope = \"html\";\n            var c = editor.getCursorPosition();\n            var state = editor.session.getState(c.row);\n            if (typeof state === \"object\") {\n                state = state[0];\n            }\n            if (state.substring) {\n                if (state.substring(0, 3) == \"js-\")\n                    scope = \"javascript\";\n                else if (state.substring(0, 4) == \"css-\")\n                    scope = \"css\";\n                else if (state.substring(0, 4) == \"php-\")\n                    scope = \"php\";\n            }\n        }\n        \n        return scope;\n    };\n\n    this.getActiveScopes = function(editor) {\n        var scope = this.$getScope(editor);\n        var scopes = [scope];\n        var snippetMap = this.snippetMap;\n        if (snippetMap[scope] && snippetMap[scope].includeScopes) {\n            scopes.push.apply(scopes, snippetMap[scope].includeScopes);\n        }\n        scopes.push(\"_\");\n        return scopes;\n    };\n\n    this.expandWithTab = function(editor, options) {\n        var self = this;\n        var result = editor.forEachSelection(function() {\n            return self.expandSnippetForSelection(editor, options);\n        }, null, {keepOrder: true});\n        if (result && editor.tabstopManager)\n            editor.tabstopManager.tabNext();\n        return result;\n    };\n    \n    this.expandSnippetForSelection = function(editor, options) {\n        var cursor = editor.getCursorPosition();\n        var line = editor.session.getLine(cursor.row);\n        var before = line.substring(0, cursor.column);\n        var after = line.substr(cursor.column);\n\n        var snippetMap = this.snippetMap;\n        var snippet;\n        this.getActiveScopes(editor).some(function(scope) {\n            var snippets = snippetMap[scope];\n            if (snippets)\n                snippet = this.findMatchingSnippet(snippets, before, after);\n            return !!snippet;\n        }, this);\n        if (!snippet)\n            return false;\n        if (options && options.dryRun)\n            return true;\n        editor.session.doc.removeInLine(cursor.row,\n            cursor.column - snippet.replaceBefore.length,\n            cursor.column + snippet.replaceAfter.length\n        );\n\n        this.variables.M__ = snippet.matchBefore;\n        this.variables.T__ = snippet.matchAfter;\n        this.insertSnippetForSelection(editor, snippet.content);\n\n        this.variables.M__ = this.variables.T__ = null;\n        return true;\n    };\n\n    this.findMatchingSnippet = function(snippetList, before, after) {\n        for (var i = snippetList.length; i--;) {\n            var s = snippetList[i];\n            if (s.startRe && !s.startRe.test(before))\n                continue;\n            if (s.endRe && !s.endRe.test(after))\n                continue;\n            if (!s.startRe && !s.endRe)\n                continue;\n\n            s.matchBefore = s.startRe ? s.startRe.exec(before) : [\"\"];\n            s.matchAfter = s.endRe ? s.endRe.exec(after) : [\"\"];\n            s.replaceBefore = s.triggerRe ? s.triggerRe.exec(before)[0] : \"\";\n            s.replaceAfter = s.endTriggerRe ? s.endTriggerRe.exec(after)[0] : \"\";\n            return s;\n        }\n    };\n\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n    this.register = function(snippets, scope) {\n        var snippetMap = this.snippetMap;\n        var snippetNameMap = this.snippetNameMap;\n        var self = this;\n        \n        if (!snippets) \n            snippets = [];\n        \n        function wrapRegexp(src) {\n            if (src && !/^\\^?\\(.*\\)\\$?$|^\\\\b$/.test(src))\n                src = \"(?:\" + src + \")\";\n\n            return src || \"\";\n        }\n        function guardedRegexp(re, guard, opening) {\n            re = wrapRegexp(re);\n            guard = wrapRegexp(guard);\n            if (opening) {\n                re = guard + re;\n                if (re && re[re.length - 1] != \"$\")\n                    re = re + \"$\";\n            } else {\n                re = re + guard;\n                if (re && re[0] != \"^\")\n                    re = \"^\" + re;\n            }\n            return new RegExp(re);\n        }\n\n        function addSnippet(s) {\n            if (!s.scope)\n                s.scope = scope || \"_\";\n            scope = s.scope;\n            if (!snippetMap[scope]) {\n                snippetMap[scope] = [];\n                snippetNameMap[scope] = {};\n            }\n\n            var map = snippetNameMap[scope];\n            if (s.name) {\n                var old = map[s.name];\n                if (old)\n                    self.unregister(old);\n                map[s.name] = s;\n            }\n            snippetMap[scope].push(s);\n\n            if (s.tabTrigger && !s.trigger) {\n                if (!s.guard && /^\\w/.test(s.tabTrigger))\n                    s.guard = \"\\\\b\";\n                s.trigger = lang.escapeRegExp(s.tabTrigger);\n            }\n            \n            if (!s.trigger && !s.guard && !s.endTrigger && !s.endGuard)\n                return;\n            \n            s.startRe = guardedRegexp(s.trigger, s.guard, true);\n            s.triggerRe = new RegExp(s.trigger, \"\", true);\n\n            s.endRe = guardedRegexp(s.endTrigger, s.endGuard, true);\n            s.endTriggerRe = new RegExp(s.endTrigger, \"\", true);\n        }\n\n        if (snippets && snippets.content)\n            addSnippet(snippets);\n        else if (Array.isArray(snippets))\n            snippets.forEach(addSnippet);\n        \n        this._signal(\"registerSnippets\", {scope: scope});\n    };\n    this.unregister = function(snippets, scope) {\n        var snippetMap = this.snippetMap;\n        var snippetNameMap = this.snippetNameMap;\n\n        function removeSnippet(s) {\n            var nameMap = snippetNameMap[s.scope||scope];\n            if (nameMap && nameMap[s.name]) {\n                delete nameMap[s.name];\n                var map = snippetMap[s.scope||scope];\n                var i = map && map.indexOf(s);\n                if (i >= 0)\n                    map.splice(i, 1);\n            }\n        }\n        if (snippets.content)\n            removeSnippet(snippets);\n        else if (Array.isArray(snippets))\n            snippets.forEach(removeSnippet);\n    };\n    this.parseSnippetFile = function(str) {\n        str = str.replace(/\\r/g, \"\");\n        var list = [], snippet = {};\n        var re = /^#.*|^({[\\s\\S]*})\\s*$|^(\\S+) (.*)$|^((?:\\n*\\t.*)+)/gm;\n        var m;\n        while (m = re.exec(str)) {\n            if (m[1]) {\n                try {\n                    snippet = JSON.parse(m[1]);\n                    list.push(snippet);\n                } catch (e) {}\n            } if (m[4]) {\n                snippet.content = m[4].replace(/^\\t/gm, \"\");\n                list.push(snippet);\n                snippet = {};\n            } else {\n                var key = m[2], val = m[3];\n                if (key == \"regex\") {\n                    var guardRe = /\\/((?:[^\\/\\\\]|\\\\.)*)|$/g;\n                    snippet.guard = guardRe.exec(val)[1];\n                    snippet.trigger = guardRe.exec(val)[1];\n                    snippet.endTrigger = guardRe.exec(val)[1];\n                    snippet.endGuard = guardRe.exec(val)[1];\n                } else if (key == \"snippet\") {\n                    snippet.tabTrigger = val.match(/^\\S*/)[0];\n                    if (!snippet.name)\n                        snippet.name = val;\n                } else {\n                    snippet[key] = val;\n                }\n            }\n        }\n        return list;\n    };\n    this.getSnippetByName = function(name, editor) {\n        var snippetMap = this.snippetNameMap;\n        var snippet;\n        this.getActiveScopes(editor).some(function(scope) {\n            var snippets = snippetMap[scope];\n            if (snippets)\n                snippet = snippets[name];\n            return !!snippet;\n        }, this);\n        return snippet;\n    };\n\n}).call(SnippetManager.prototype);\n\n\nvar TabstopManager = function(editor) {\n    if (editor.tabstopManager)\n        return editor.tabstopManager;\n    editor.tabstopManager = this;\n    this.$onChange = this.onChange.bind(this);\n    this.$onChangeSelection = lang.delayedCall(this.onChangeSelection.bind(this)).schedule;\n    this.$onChangeSession = this.onChangeSession.bind(this);\n    this.$onAfterExec = this.onAfterExec.bind(this);\n    this.attach(editor);\n};\n(function() {\n    this.attach = function(editor) {\n        this.index = 0;\n        this.ranges = [];\n        this.tabstops = [];\n        this.$openTabstops = null;\n        this.selectedTabstop = null;\n\n        this.editor = editor;\n        this.editor.on(\"change\", this.$onChange);\n        this.editor.on(\"changeSelection\", this.$onChangeSelection);\n        this.editor.on(\"changeSession\", this.$onChangeSession);\n        this.editor.commands.on(\"afterExec\", this.$onAfterExec);\n        this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n    this.detach = function() {\n        this.tabstops.forEach(this.removeTabstopMarkers, this);\n        this.ranges = null;\n        this.tabstops = null;\n        this.selectedTabstop = null;\n        this.editor.removeListener(\"change\", this.$onChange);\n        this.editor.removeListener(\"changeSelection\", this.$onChangeSelection);\n        this.editor.removeListener(\"changeSession\", this.$onChangeSession);\n        this.editor.commands.removeListener(\"afterExec\", this.$onAfterExec);\n        this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n        this.editor.tabstopManager = null;\n        this.editor = null;\n    };\n\n    this.onChange = function(delta) {\n        var changeRange = delta;\n        var isRemove = delta.action[0] == \"r\";\n        var start = delta.start;\n        var end = delta.end;\n        var startRow = start.row;\n        var endRow = end.row;\n        var lineDif = endRow - startRow;\n        var colDiff = end.column - start.column;\n\n        if (isRemove) {\n            lineDif = -lineDif;\n            colDiff = -colDiff;\n        }\n        if (!this.$inChange && isRemove) {\n            var ts = this.selectedTabstop;\n            var changedOutside = ts && !ts.some(function(r) {\n                return comparePoints(r.start, start) <= 0 && comparePoints(r.end, end) >= 0;\n            });\n            if (changedOutside)\n                return this.detach();\n        }\n        var ranges = this.ranges;\n        for (var i = 0; i < ranges.length; i++) {\n            var r = ranges[i];\n            if (r.end.row < start.row)\n                continue;\n\n            if (isRemove && comparePoints(start, r.start) < 0 && comparePoints(end, r.end) > 0) {\n                this.removeRange(r);\n                i--;\n                continue;\n            }\n\n            if (r.start.row == startRow && r.start.column > start.column)\n                r.start.column += colDiff;\n            if (r.end.row == startRow && r.end.column >= start.column)\n                r.end.column += colDiff;\n            if (r.start.row >= startRow)\n                r.start.row += lineDif;\n            if (r.end.row >= startRow)\n                r.end.row += lineDif;\n\n            if (comparePoints(r.start, r.end) > 0)\n                this.removeRange(r);\n        }\n        if (!ranges.length)\n            this.detach();\n    };\n    this.updateLinkedFields = function() {\n        var ts = this.selectedTabstop;\n        if (!ts || !ts.hasLinkedRanges)\n            return;\n        this.$inChange = true;\n        var session = this.editor.session;\n        var text = session.getTextRange(ts.firstNonLinked);\n        for (var i = ts.length; i--;) {\n            var range = ts[i];\n            if (!range.linked)\n                continue;\n            var fmt = exports.snippetManager.tmStrFormat(text, range.original);\n            session.replace(range, fmt);\n        }\n        this.$inChange = false;\n    };\n    this.onAfterExec = function(e) {\n        if (e.command && !e.command.readOnly)\n            this.updateLinkedFields();\n    };\n    this.onChangeSelection = function() {\n        if (!this.editor)\n            return;\n        var lead = this.editor.selection.lead;\n        var anchor = this.editor.selection.anchor;\n        var isEmpty = this.editor.selection.isEmpty();\n        for (var i = this.ranges.length; i--;) {\n            if (this.ranges[i].linked)\n                continue;\n            var containsLead = this.ranges[i].contains(lead.row, lead.column);\n            var containsAnchor = isEmpty || this.ranges[i].contains(anchor.row, anchor.column);\n            if (containsLead && containsAnchor)\n                return;\n        }\n        this.detach();\n    };\n    this.onChangeSession = function() {\n        this.detach();\n    };\n    this.tabNext = function(dir) {\n        var max = this.tabstops.length;\n        var index = this.index + (dir || 1);\n        index = Math.min(Math.max(index, 1), max);\n        if (index == max)\n            index = 0;\n        this.selectTabstop(index);\n        if (index === 0)\n            this.detach();\n    };\n    this.selectTabstop = function(index) {\n        this.$openTabstops = null;\n        var ts = this.tabstops[this.index];\n        if (ts)\n            this.addTabstopMarkers(ts);\n        this.index = index;\n        ts = this.tabstops[this.index];\n        if (!ts || !ts.length)\n            return;\n        \n        this.selectedTabstop = ts;\n        if (!this.editor.inVirtualSelectionMode) {        \n            var sel = this.editor.multiSelect;\n            sel.toSingleRange(ts.firstNonLinked.clone());\n            for (var i = ts.length; i--;) {\n                if (ts.hasLinkedRanges && ts[i].linked)\n                    continue;\n                sel.addRange(ts[i].clone(), true);\n            }\n            if (sel.ranges[0])\n                sel.addRange(sel.ranges[0].clone());\n        } else {\n            this.editor.selection.setRange(ts.firstNonLinked);\n        }\n        \n        this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n    this.addTabstops = function(tabstops, start, end) {\n        if (!this.$openTabstops)\n            this.$openTabstops = [];\n        if (!tabstops[0]) {\n            var p = Range.fromPoints(end, end);\n            moveRelative(p.start, start);\n            moveRelative(p.end, start);\n            tabstops[0] = [p];\n            tabstops[0].index = 0;\n        }\n\n        var i = this.index;\n        var arg = [i + 1, 0];\n        var ranges = this.ranges;\n        tabstops.forEach(function(ts, index) {\n            var dest = this.$openTabstops[index] || ts;\n                \n            for (var i = ts.length; i--;) {\n                var p = ts[i];\n                var range = Range.fromPoints(p.start, p.end || p.start);\n                movePoint(range.start, start);\n                movePoint(range.end, start);\n                range.original = p;\n                range.tabstop = dest;\n                ranges.push(range);\n                if (dest != ts)\n                    dest.unshift(range);\n                else\n                    dest[i] = range;\n                if (p.fmtString) {\n                    range.linked = true;\n                    dest.hasLinkedRanges = true;\n                } else if (!dest.firstNonLinked)\n                    dest.firstNonLinked = range;\n            }\n            if (!dest.firstNonLinked)\n                dest.hasLinkedRanges = false;\n            if (dest === ts) {\n                arg.push(dest);\n                this.$openTabstops[index] = dest;\n            }\n            this.addTabstopMarkers(dest);\n        }, this);\n        \n        if (arg.length > 2) {\n            if (this.tabstops.length)\n                arg.push(arg.splice(2, 1)[0]);\n            this.tabstops.splice.apply(this.tabstops, arg);\n        }\n    };\n\n    this.addTabstopMarkers = function(ts) {\n        var session = this.editor.session;\n        ts.forEach(function(range) {\n            if  (!range.markerId)\n                range.markerId = session.addMarker(range, \"ace_snippet-marker\", \"text\");\n        });\n    };\n    this.removeTabstopMarkers = function(ts) {\n        var session = this.editor.session;\n        ts.forEach(function(range) {\n            session.removeMarker(range.markerId);\n            range.markerId = null;\n        });\n    };\n    this.removeRange = function(range) {\n        var i = range.tabstop.indexOf(range);\n        range.tabstop.splice(i, 1);\n        i = this.ranges.indexOf(range);\n        this.ranges.splice(i, 1);\n        this.editor.session.removeMarker(range.markerId);\n        if (!range.tabstop.length) {\n            i = this.tabstops.indexOf(range.tabstop);\n            if (i != -1)\n                this.tabstops.splice(i, 1);\n            if (!this.tabstops.length)\n                this.detach();\n        }\n    };\n\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys({\n        \"Tab\": function(ed) {\n            if (exports.snippetManager && exports.snippetManager.expandWithTab(ed)) {\n                return;\n            }\n\n            ed.tabstopManager.tabNext(1);\n        },\n        \"Shift-Tab\": function(ed) {\n            ed.tabstopManager.tabNext(-1);\n        },\n        \"Esc\": function(ed) {\n            ed.tabstopManager.detach();\n        },\n        \"Return\": function(ed) {\n            return false;\n        }\n    });\n}).call(TabstopManager.prototype);\n\n\n\nvar changeTracker = {};\nchangeTracker.onChange = Anchor.prototype.onChange;\nchangeTracker.setPosition = function(row, column) {\n    this.pos.row = row;\n    this.pos.column = column;\n};\nchangeTracker.update = function(pos, delta, $insertRight) {\n    this.$insertRight = $insertRight;\n    this.pos = pos; \n    this.onChange(delta);\n};\n\nvar movePoint = function(point, diff) {\n    if (point.row == 0)\n        point.column += diff.column;\n    point.row += diff.row;\n};\n\nvar moveRelative = function(point, start) {\n    if (point.row == start.row)\n        point.column -= start.column;\n    point.row -= start.row;\n};\n\n\nacequire(\"./lib/dom\").importCssString(\"\\\n.ace_snippet-marker {\\\n    -moz-box-sizing: border-box;\\\n    box-sizing: border-box;\\\n    background: rgba(194, 193, 208, 0.09);\\\n    border: 1px dotted rgba(211, 208, 235, 0.62);\\\n    position: absolute;\\\n}\");\n\nexports.snippetManager = new SnippetManager();\n\n\nvar Editor = acequire(\"./editor\").Editor;\n(function() {\n    this.insertSnippet = function(content, options) {\n        return exports.snippetManager.insertSnippet(this, content, options);\n    };\n    this.expandSnippet = function(options) {\n        return exports.snippetManager.expandWithTab(this, options);\n    };\n}).call(Editor.prototype);\n\n});\n\nace.define(\"ace/autocomplete/popup\",[\"require\",\"exports\",\"module\",\"ace/virtual_renderer\",\"ace/editor\",\"ace/range\",\"ace/lib/event\",\"ace/lib/lang\",\"ace/lib/dom\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Renderer = acequire(\"../virtual_renderer\").VirtualRenderer;\nvar Editor = acequire(\"../editor\").Editor;\nvar Range = acequire(\"../range\").Range;\nvar event = acequire(\"../lib/event\");\nvar lang = acequire(\"../lib/lang\");\nvar dom = acequire(\"../lib/dom\");\n\nvar $singleLineEditor = function(el) {\n    var renderer = new Renderer(el);\n\n    renderer.$maxLines = 4;\n\n    var editor = new Editor(renderer);\n\n    editor.setHighlightActiveLine(false);\n    editor.setShowPrintMargin(false);\n    editor.renderer.setShowGutter(false);\n    editor.renderer.setHighlightGutterLine(false);\n\n    editor.$mouseHandler.$focusWaitTimout = 0;\n    editor.$highlightTagPending = true;\n\n    return editor;\n};\n\nvar AcePopup = function(parentNode) {\n    var el = dom.createElement(\"div\");\n    var popup = new $singleLineEditor(el);\n\n    if (parentNode)\n        parentNode.appendChild(el);\n    el.style.display = \"none\";\n    popup.renderer.content.style.cursor = \"default\";\n    popup.renderer.setStyle(\"ace_autocomplete\");\n\n    popup.setOption(\"displayIndentGuides\", false);\n    popup.setOption(\"dragDelay\", 150);\n\n    var noop = function(){};\n\n    popup.focus = noop;\n    popup.$isFocused = true;\n\n    popup.renderer.$cursorLayer.restartTimer = noop;\n    popup.renderer.$cursorLayer.element.style.opacity = 0;\n\n    popup.renderer.$maxLines = 8;\n    popup.renderer.$keepTextAreaAtCursor = false;\n\n    popup.setHighlightActiveLine(false);\n    popup.session.highlight(\"\");\n    popup.session.$searchHighlight.clazz = \"ace_highlight-marker\";\n\n    popup.on(\"mousedown\", function(e) {\n        var pos = e.getDocumentPosition();\n        popup.selection.moveToPosition(pos);\n        selectionMarker.start.row = selectionMarker.end.row = pos.row;\n        e.stop();\n    });\n\n    var lastMouseEvent;\n    var hoverMarker = new Range(-1,0,-1,Infinity);\n    var selectionMarker = new Range(-1,0,-1,Infinity);\n    selectionMarker.id = popup.session.addMarker(selectionMarker, \"ace_active-line\", \"fullLine\");\n    popup.setSelectOnHover = function(val) {\n        if (!val) {\n            hoverMarker.id = popup.session.addMarker(hoverMarker, \"ace_line-hover\", \"fullLine\");\n        } else if (hoverMarker.id) {\n            popup.session.removeMarker(hoverMarker.id);\n            hoverMarker.id = null;\n        }\n    };\n    popup.setSelectOnHover(false);\n    popup.on(\"mousemove\", function(e) {\n        if (!lastMouseEvent) {\n            lastMouseEvent = e;\n            return;\n        }\n        if (lastMouseEvent.x == e.x && lastMouseEvent.y == e.y) {\n            return;\n        }\n        lastMouseEvent = e;\n        lastMouseEvent.scrollTop = popup.renderer.scrollTop;\n        var row = lastMouseEvent.getDocumentPosition().row;\n        if (hoverMarker.start.row != row) {\n            if (!hoverMarker.id)\n                popup.setRow(row);\n            setHoverMarker(row);\n        }\n    });\n    popup.renderer.on(\"beforeRender\", function() {\n        if (lastMouseEvent && hoverMarker.start.row != -1) {\n            lastMouseEvent.$pos = null;\n            var row = lastMouseEvent.getDocumentPosition().row;\n            if (!hoverMarker.id)\n                popup.setRow(row);\n            setHoverMarker(row, true);\n        }\n    });\n    popup.renderer.on(\"afterRender\", function() {\n        var row = popup.getRow();\n        var t = popup.renderer.$textLayer;\n        var selected = t.element.childNodes[row - t.config.firstRow];\n        if (selected == t.selectedNode)\n            return;\n        if (t.selectedNode)\n            dom.removeCssClass(t.selectedNode, \"ace_selected\");\n        t.selectedNode = selected;\n        if (selected)\n            dom.addCssClass(selected, \"ace_selected\");\n    });\n    var hideHoverMarker = function() { setHoverMarker(-1) };\n    var setHoverMarker = function(row, suppressRedraw) {\n        if (row !== hoverMarker.start.row) {\n            hoverMarker.start.row = hoverMarker.end.row = row;\n            if (!suppressRedraw)\n                popup.session._emit(\"changeBackMarker\");\n            popup._emit(\"changeHoverMarker\");\n        }\n    };\n    popup.getHoveredRow = function() {\n        return hoverMarker.start.row;\n    };\n\n    event.addListener(popup.container, \"mouseout\", hideHoverMarker);\n    popup.on(\"hide\", hideHoverMarker);\n    popup.on(\"changeSelection\", hideHoverMarker);\n\n    popup.session.doc.getLength = function() {\n        return popup.data.length;\n    };\n    popup.session.doc.getLine = function(i) {\n        var data = popup.data[i];\n        if (typeof data == \"string\")\n            return data;\n        return (data && data.value) || \"\";\n    };\n\n    var bgTokenizer = popup.session.bgTokenizer;\n    bgTokenizer.$tokenizeRow = function(row) {\n        var data = popup.data[row];\n        var tokens = [];\n        if (!data)\n            return tokens;\n        if (typeof data == \"string\")\n            data = {value: data};\n        if (!data.caption)\n            data.caption = data.value || data.name;\n\n        var last = -1;\n        var flag, c;\n        for (var i = 0; i < data.caption.length; i++) {\n            c = data.caption[i];\n            flag = data.matchMask & (1 << i) ? 1 : 0;\n            if (last !== flag) {\n                tokens.push({type: data.className || \"\" + ( flag ? \"completion-highlight\" : \"\"), value: c});\n                last = flag;\n            } else {\n                tokens[tokens.length - 1].value += c;\n            }\n        }\n\n        if (data.meta) {\n            var maxW = popup.renderer.$size.scrollerWidth / popup.renderer.layerConfig.characterWidth;\n            var metaData = data.meta;\n            if (metaData.length + data.caption.length > maxW - 2) {\n                metaData = metaData.substr(0, maxW - data.caption.length - 3) + \"\\u2026\"\n            }\n            tokens.push({type: \"rightAlignedText\", value: metaData});\n        }\n        return tokens;\n    };\n    bgTokenizer.$updateOnChange = noop;\n    bgTokenizer.start = noop;\n\n    popup.session.$computeWidth = function() {\n        return this.screenWidth = 0;\n    };\n\n    popup.$blockScrolling = Infinity;\n    popup.isOpen = false;\n    popup.isTopdown = false;\n\n    popup.data = [];\n    popup.setData = function(list) {\n        popup.setValue(lang.stringRepeat(\"\\n\", list.length), -1);\n        popup.data = list || [];\n        popup.setRow(0);\n    };\n    popup.getData = function(row) {\n        return popup.data[row];\n    };\n\n    popup.getRow = function() {\n        return selectionMarker.start.row;\n    };\n    popup.setRow = function(line) {\n        line = Math.max(0, Math.min(this.data.length, line));\n        if (selectionMarker.start.row != line) {\n            popup.selection.clearSelection();\n            selectionMarker.start.row = selectionMarker.end.row = line || 0;\n            popup.session._emit(\"changeBackMarker\");\n            popup.moveCursorTo(line || 0, 0);\n            if (popup.isOpen)\n                popup._signal(\"select\");\n        }\n    };\n\n    popup.on(\"changeSelection\", function() {\n        if (popup.isOpen)\n            popup.setRow(popup.selection.lead.row);\n        popup.renderer.scrollCursorIntoView();\n    });\n\n    popup.hide = function() {\n        this.container.style.display = \"none\";\n        this._signal(\"hide\");\n        popup.isOpen = false;\n    };\n    popup.show = function(pos, lineHeight, topdownOnly) {\n        var el = this.container;\n        var screenHeight = window.innerHeight;\n        var screenWidth = window.innerWidth;\n        var renderer = this.renderer;\n        var maxH = renderer.$maxLines * lineHeight * 1.4;\n        var top = pos.top + this.$borderSize;\n        var allowTopdown = top > screenHeight / 2 && !topdownOnly;\n        if (allowTopdown && top + lineHeight + maxH > screenHeight) {\n            renderer.$maxPixelHeight = top - 2 * this.$borderSize;\n            el.style.top = \"\";\n            el.style.bottom = screenHeight - top + \"px\";\n            popup.isTopdown = false;\n        } else {\n            top += lineHeight;\n            renderer.$maxPixelHeight = screenHeight - top - 0.2 * lineHeight;\n            el.style.top = top + \"px\";\n            el.style.bottom = \"\";\n            popup.isTopdown = true;\n        }\n\n        el.style.display = \"\";\n        this.renderer.$textLayer.checkForSizeChanges();\n\n        var left = pos.left;\n        if (left + el.offsetWidth > screenWidth)\n            left = screenWidth - el.offsetWidth;\n\n        el.style.left = left + \"px\";\n\n        this._signal(\"show\");\n        lastMouseEvent = null;\n        popup.isOpen = true;\n    };\n\n    popup.getTextLeftOffset = function() {\n        return this.$borderSize + this.renderer.$padding + this.$imageSize;\n    };\n\n    popup.$imageSize = 0;\n    popup.$borderSize = 1;\n\n    return popup;\n};\n\ndom.importCssString(\"\\\n.ace_editor.ace_autocomplete .ace_marker-layer .ace_active-line {\\\n    background-color: #CAD6FA;\\\n    z-index: 1;\\\n}\\\n.ace_editor.ace_autocomplete .ace_line-hover {\\\n    border: 1px solid #abbffe;\\\n    margin-top: -1px;\\\n    background: rgba(233,233,253,0.4);\\\n}\\\n.ace_editor.ace_autocomplete .ace_line-hover {\\\n    position: absolute;\\\n    z-index: 2;\\\n}\\\n.ace_editor.ace_autocomplete .ace_scroller {\\\n   background: none;\\\n   border: none;\\\n   box-shadow: none;\\\n}\\\n.ace_rightAlignedText {\\\n    color: gray;\\\n    display: inline-block;\\\n    position: absolute;\\\n    right: 4px;\\\n    text-align: right;\\\n    z-index: -1;\\\n}\\\n.ace_editor.ace_autocomplete .ace_completion-highlight{\\\n    color: #000;\\\n    text-shadow: 0 0 0.01em;\\\n}\\\n.ace_editor.ace_autocomplete {\\\n    width: 280px;\\\n    z-index: 200000;\\\n    background: #fbfbfb;\\\n    color: #444;\\\n    border: 1px lightgray solid;\\\n    position: fixed;\\\n    box-shadow: 2px 3px 5px rgba(0,0,0,.2);\\\n    line-height: 1.4;\\\n}\");\n\nexports.AcePopup = AcePopup;\n\n});\n\nace.define(\"ace/autocomplete/util\",[\"require\",\"exports\",\"module\"], function(acequire, exports, module) {\n\"use strict\";\n\nexports.parForEach = function(array, fn, callback) {\n    var completed = 0;\n    var arLength = array.length;\n    if (arLength === 0)\n        callback();\n    for (var i = 0; i < arLength; i++) {\n        fn(array[i], function(result, err) {\n            completed++;\n            if (completed === arLength)\n                callback(result, err);\n        });\n    }\n};\n\nvar ID_REGEX = /[a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF]/;\n\nexports.retrievePrecedingIdentifier = function(text, pos, regex) {\n    regex = regex || ID_REGEX;\n    var buf = [];\n    for (var i = pos-1; i >= 0; i--) {\n        if (regex.test(text[i]))\n            buf.push(text[i]);\n        else\n            break;\n    }\n    return buf.reverse().join(\"\");\n};\n\nexports.retrieveFollowingIdentifier = function(text, pos, regex) {\n    regex = regex || ID_REGEX;\n    var buf = [];\n    for (var i = pos; i < text.length; i++) {\n        if (regex.test(text[i]))\n            buf.push(text[i]);\n        else\n            break;\n    }\n    return buf;\n};\n\nexports.getCompletionPrefix = function (editor) {\n    var pos = editor.getCursorPosition();\n    var line = editor.session.getLine(pos.row);\n    var prefix;\n    editor.completers.forEach(function(completer) {\n        if (completer.identifierRegexps) {\n            completer.identifierRegexps.forEach(function(identifierRegex) {\n                if (!prefix && identifierRegex)\n                    prefix = this.retrievePrecedingIdentifier(line, pos.column, identifierRegex);\n            }.bind(this));\n        }\n    }.bind(this));\n    return prefix || this.retrievePrecedingIdentifier(line, pos.column);\n};\n\n});\n\nace.define(\"ace/autocomplete\",[\"require\",\"exports\",\"module\",\"ace/keyboard/hash_handler\",\"ace/autocomplete/popup\",\"ace/autocomplete/util\",\"ace/lib/event\",\"ace/lib/lang\",\"ace/lib/dom\",\"ace/snippets\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar HashHandler = acequire(\"./keyboard/hash_handler\").HashHandler;\nvar AcePopup = acequire(\"./autocomplete/popup\").AcePopup;\nvar util = acequire(\"./autocomplete/util\");\nvar event = acequire(\"./lib/event\");\nvar lang = acequire(\"./lib/lang\");\nvar dom = acequire(\"./lib/dom\");\nvar snippetManager = acequire(\"./snippets\").snippetManager;\n\nvar Autocomplete = function() {\n    this.autoInsert = false;\n    this.autoSelect = true;\n    this.exactMatch = false;\n    this.gatherCompletionsId = 0;\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys(this.commands);\n\n    this.blurListener = this.blurListener.bind(this);\n    this.changeListener = this.changeListener.bind(this);\n    this.mousedownListener = this.mousedownListener.bind(this);\n    this.mousewheelListener = this.mousewheelListener.bind(this);\n\n    this.changeTimer = lang.delayedCall(function() {\n        this.updateCompletions(true);\n    }.bind(this));\n\n    this.tooltipTimer = lang.delayedCall(this.updateDocTooltip.bind(this), 50);\n};\n\n(function() {\n\n    this.$init = function() {\n        this.popup = new AcePopup(document.body || document.documentElement);\n        this.popup.on(\"click\", function(e) {\n            this.insertMatch();\n            e.stop();\n        }.bind(this));\n        this.popup.focus = this.editor.focus.bind(this.editor);\n        this.popup.on(\"show\", this.tooltipTimer.bind(null, null));\n        this.popup.on(\"select\", this.tooltipTimer.bind(null, null));\n        this.popup.on(\"changeHoverMarker\", this.tooltipTimer.bind(null, null));\n        return this.popup;\n    };\n\n    this.getPopup = function() {\n        return this.popup || this.$init();\n    };\n\n    this.openPopup = function(editor, prefix, keepPopupPosition) {\n        if (!this.popup)\n            this.$init();\n\n        this.popup.setData(this.completions.filtered);\n\n        editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n        \n        var renderer = editor.renderer;\n        this.popup.setRow(this.autoSelect ? 0 : -1);\n        if (!keepPopupPosition) {\n            this.popup.setTheme(editor.getTheme());\n            this.popup.setFontSize(editor.getFontSize());\n\n            var lineHeight = renderer.layerConfig.lineHeight;\n\n            var pos = renderer.$cursorLayer.getPixelPosition(this.base, true);\n            pos.left -= this.popup.getTextLeftOffset();\n\n            var rect = editor.container.getBoundingClientRect();\n            pos.top += rect.top - renderer.layerConfig.offset;\n            pos.left += rect.left - editor.renderer.scrollLeft;\n            pos.left += renderer.gutterWidth;\n\n            this.popup.show(pos, lineHeight);\n        } else if (keepPopupPosition && !prefix) {\n            this.detach();\n        }\n    };\n\n    this.detach = function() {\n        this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n        this.editor.off(\"changeSelection\", this.changeListener);\n        this.editor.off(\"blur\", this.blurListener);\n        this.editor.off(\"mousedown\", this.mousedownListener);\n        this.editor.off(\"mousewheel\", this.mousewheelListener);\n        this.changeTimer.cancel();\n        this.hideDocTooltip();\n\n        this.gatherCompletionsId += 1;\n        if (this.popup && this.popup.isOpen)\n            this.popup.hide();\n\n        if (this.base)\n            this.base.detach();\n        this.activated = false;\n        this.completions = this.base = null;\n    };\n\n    this.changeListener = function(e) {\n        var cursor = this.editor.selection.lead;\n        if (cursor.row != this.base.row || cursor.column < this.base.column) {\n            this.detach();\n        }\n        if (this.activated)\n            this.changeTimer.schedule();\n        else\n            this.detach();\n    };\n\n    this.blurListener = function(e) {\n        if (e.relatedTarget && e.relatedTarget.nodeName == \"A\" && e.relatedTarget.href) {\n            window.open(e.relatedTarget.href, \"_blank\");\n        }\n        var el = document.activeElement;\n        var text = this.editor.textInput.getElement();\n        var fromTooltip = e.relatedTarget && e.relatedTarget == this.tooltipNode;\n        var container = this.popup && this.popup.container;\n        if (el != text && el.parentNode != container && !fromTooltip\n            && el != this.tooltipNode && e.relatedTarget != text\n        ) {\n            this.detach();\n        }\n    };\n\n    this.mousedownListener = function(e) {\n        this.detach();\n    };\n\n    this.mousewheelListener = function(e) {\n        this.detach();\n    };\n\n    this.goTo = function(where) {\n        var row = this.popup.getRow();\n        var max = this.popup.session.getLength() - 1;\n\n        switch(where) {\n            case \"up\": row = row <= 0 ? max : row - 1; break;\n            case \"down\": row = row >= max ? -1 : row + 1; break;\n            case \"start\": row = 0; break;\n            case \"end\": row = max; break;\n        }\n\n        this.popup.setRow(row);\n    };\n\n    this.insertMatch = function(data, options) {\n        if (!data)\n            data = this.popup.getData(this.popup.getRow());\n        if (!data)\n            return false;\n\n        if (data.completer && data.completer.insertMatch) {\n            data.completer.insertMatch(this.editor, data);\n        } else {\n            if (this.completions.filterText) {\n                var ranges = this.editor.selection.getAllRanges();\n                for (var i = 0, range; range = ranges[i]; i++) {\n                    range.start.column -= this.completions.filterText.length;\n                    this.editor.session.remove(range);\n                }\n            }\n            if (data.snippet)\n                snippetManager.insertSnippet(this.editor, data.snippet);\n            else\n                this.editor.execCommand(\"insertstring\", data.value || data);\n        }\n        this.detach();\n    };\n\n\n    this.commands = {\n        \"Up\": function(editor) { editor.completer.goTo(\"up\"); },\n        \"Down\": function(editor) { editor.completer.goTo(\"down\"); },\n        \"Ctrl-Up|Ctrl-Home\": function(editor) { editor.completer.goTo(\"start\"); },\n        \"Ctrl-Down|Ctrl-End\": function(editor) { editor.completer.goTo(\"end\"); },\n\n        \"Esc\": function(editor) { editor.completer.detach(); },\n        \"Return\": function(editor) { return editor.completer.insertMatch(); },\n        \"Shift-Return\": function(editor) { editor.completer.insertMatch(null, {deleteSuffix: true}); },\n        \"Tab\": function(editor) {\n            var result = editor.completer.insertMatch();\n            if (!result && !editor.tabstopManager)\n                editor.completer.goTo(\"down\");\n            else\n                return result;\n        },\n\n        \"PageUp\": function(editor) { editor.completer.popup.gotoPageUp(); },\n        \"PageDown\": function(editor) { editor.completer.popup.gotoPageDown(); }\n    };\n\n    this.gatherCompletions = function(editor, callback) {\n        var session = editor.getSession();\n        var pos = editor.getCursorPosition();\n\n        var line = session.getLine(pos.row);\n        var prefix = util.getCompletionPrefix(editor);\n\n        this.base = session.doc.createAnchor(pos.row, pos.column - prefix.length);\n        this.base.$insertRight = true;\n\n        var matches = [];\n        var total = editor.completers.length;\n        editor.completers.forEach(function(completer, i) {\n            completer.getCompletions(editor, session, pos, prefix, function(err, results) {\n                if (!err && results)\n                    matches = matches.concat(results);\n                var pos = editor.getCursorPosition();\n                var line = session.getLine(pos.row);\n                callback(null, {\n                    prefix: prefix,\n                    matches: matches,\n                    finished: (--total === 0)\n                });\n            });\n        });\n        return true;\n    };\n\n    this.showPopup = function(editor) {\n        if (this.editor)\n            this.detach();\n\n        this.activated = true;\n\n        this.editor = editor;\n        if (editor.completer != this) {\n            if (editor.completer)\n                editor.completer.detach();\n            editor.completer = this;\n        }\n\n        editor.on(\"changeSelection\", this.changeListener);\n        editor.on(\"blur\", this.blurListener);\n        editor.on(\"mousedown\", this.mousedownListener);\n        editor.on(\"mousewheel\", this.mousewheelListener);\n\n        this.updateCompletions();\n    };\n\n    this.updateCompletions = function(keepPopupPosition) {\n        if (keepPopupPosition && this.base && this.completions) {\n            var pos = this.editor.getCursorPosition();\n            var prefix = this.editor.session.getTextRange({start: this.base, end: pos});\n            if (prefix == this.completions.filterText)\n                return;\n            this.completions.setFilter(prefix);\n            if (!this.completions.filtered.length)\n                return this.detach();\n            if (this.completions.filtered.length == 1\n            && this.completions.filtered[0].value == prefix\n            && !this.completions.filtered[0].snippet)\n                return this.detach();\n            this.openPopup(this.editor, prefix, keepPopupPosition);\n            return;\n        }\n        var _id = this.gatherCompletionsId;\n        this.gatherCompletions(this.editor, function(err, results) {\n            var detachIfFinished = function() {\n                if (!results.finished) return;\n                return this.detach();\n            }.bind(this);\n\n            var prefix = results.prefix;\n            var matches = results && results.matches;\n\n            if (!matches || !matches.length)\n                return detachIfFinished();\n            if (prefix.indexOf(results.prefix) !== 0 || _id != this.gatherCompletionsId)\n                return;\n\n            this.completions = new FilteredList(matches);\n\n            if (this.exactMatch)\n                this.completions.exactMatch = true;\n\n            this.completions.setFilter(prefix);\n            var filtered = this.completions.filtered;\n            if (!filtered.length)\n                return detachIfFinished();\n            if (filtered.length == 1 && filtered[0].value == prefix && !filtered[0].snippet)\n                return detachIfFinished();\n            if (this.autoInsert && filtered.length == 1 && results.finished)\n                return this.insertMatch(filtered[0]);\n\n            this.openPopup(this.editor, prefix, keepPopupPosition);\n        }.bind(this));\n    };\n\n    this.cancelContextMenu = function() {\n        this.editor.$mouseHandler.cancelContextMenu();\n    };\n\n    this.updateDocTooltip = function() {\n        var popup = this.popup;\n        var all = popup.data;\n        var selected = all && (all[popup.getHoveredRow()] || all[popup.getRow()]);\n        var doc = null;\n        if (!selected || !this.editor || !this.popup.isOpen)\n            return this.hideDocTooltip();\n        this.editor.completers.some(function(completer) {\n            if (completer.getDocTooltip)\n                doc = completer.getDocTooltip(selected);\n            return doc;\n        });\n        if (!doc)\n            doc = selected;\n\n        if (typeof doc == \"string\")\n            doc = {docText: doc};\n        if (!doc || !(doc.docHTML || doc.docText))\n            return this.hideDocTooltip();\n        this.showDocTooltip(doc);\n    };\n\n    this.showDocTooltip = function(item) {\n        if (!this.tooltipNode) {\n            this.tooltipNode = dom.createElement(\"div\");\n            this.tooltipNode.className = \"ace_tooltip ace_doc-tooltip\";\n            this.tooltipNode.style.margin = 0;\n            this.tooltipNode.style.pointerEvents = \"auto\";\n            this.tooltipNode.tabIndex = -1;\n            this.tooltipNode.onblur = this.blurListener.bind(this);\n        }\n\n        var tooltipNode = this.tooltipNode;\n        if (item.docHTML) {\n            tooltipNode.innerHTML = item.docHTML;\n        } else if (item.docText) {\n            tooltipNode.textContent = item.docText;\n        }\n\n        if (!tooltipNode.parentNode)\n            document.body.appendChild(tooltipNode);\n        var popup = this.popup;\n        var rect = popup.container.getBoundingClientRect();\n        tooltipNode.style.top = popup.container.style.top;\n        tooltipNode.style.bottom = popup.container.style.bottom;\n\n        if (window.innerWidth - rect.right < 320) {\n            tooltipNode.style.right = window.innerWidth - rect.left + \"px\";\n            tooltipNode.style.left = \"\";\n        } else {\n            tooltipNode.style.left = (rect.right + 1) + \"px\";\n            tooltipNode.style.right = \"\";\n        }\n        tooltipNode.style.display = \"block\";\n    };\n\n    this.hideDocTooltip = function() {\n        this.tooltipTimer.cancel();\n        if (!this.tooltipNode) return;\n        var el = this.tooltipNode;\n        if (!this.editor.isFocused() && document.activeElement == el)\n            this.editor.focus();\n        this.tooltipNode = null;\n        if (el.parentNode)\n            el.parentNode.removeChild(el);\n    };\n\n}).call(Autocomplete.prototype);\n\nAutocomplete.startCommand = {\n    name: \"startAutocomplete\",\n    exec: function(editor) {\n        if (!editor.completer)\n            editor.completer = new Autocomplete();\n        editor.completer.autoInsert = false;\n        editor.completer.autoSelect = true;\n        editor.completer.showPopup(editor);\n        editor.completer.cancelContextMenu();\n    },\n    bindKey: \"Ctrl-Space|Ctrl-Shift-Space|Alt-Space\"\n};\n\nvar FilteredList = function(array, filterText) {\n    this.all = array;\n    this.filtered = array;\n    this.filterText = filterText || \"\";\n    this.exactMatch = false;\n};\n(function(){\n    this.setFilter = function(str) {\n        if (str.length > this.filterText && str.lastIndexOf(this.filterText, 0) === 0)\n            var matches = this.filtered;\n        else\n            var matches = this.all;\n\n        this.filterText = str;\n        matches = this.filterCompletions(matches, this.filterText);\n        matches = matches.sort(function(a, b) {\n            return b.exactMatch - a.exactMatch || b.score - a.score;\n        });\n        var prev = null;\n        matches = matches.filter(function(item){\n            var caption = item.snippet || item.caption || item.value;\n            if (caption === prev) return false;\n            prev = caption;\n            return true;\n        });\n\n        this.filtered = matches;\n    };\n    this.filterCompletions = function(items, needle) {\n        var results = [];\n        var upper = needle.toUpperCase();\n        var lower = needle.toLowerCase();\n        loop: for (var i = 0, item; item = items[i]; i++) {\n            var caption = item.value || item.caption || item.snippet;\n            if (!caption) continue;\n            var lastIndex = -1;\n            var matchMask = 0;\n            var penalty = 0;\n            var index, distance;\n\n            if (this.exactMatch) {\n                if (needle !== caption.substr(0, needle.length))\n                    continue loop;\n            }else{\n                for (var j = 0; j < needle.length; j++) {\n                    var i1 = caption.indexOf(lower[j], lastIndex + 1);\n                    var i2 = caption.indexOf(upper[j], lastIndex + 1);\n                    index = (i1 >= 0) ? ((i2 < 0 || i1 < i2) ? i1 : i2) : i2;\n                    if (index < 0)\n                        continue loop;\n                    distance = index - lastIndex - 1;\n                    if (distance > 0) {\n                        if (lastIndex === -1)\n                            penalty += 10;\n                        penalty += distance;\n                    }\n                    matchMask = matchMask | (1 << index);\n                    lastIndex = index;\n                }\n            }\n            item.matchMask = matchMask;\n            item.exactMatch = penalty ? 0 : 1;\n            item.score = (item.score || 0) - penalty;\n            results.push(item);\n        }\n        return results;\n    };\n}).call(FilteredList.prototype);\n\nexports.Autocomplete = Autocomplete;\nexports.FilteredList = FilteredList;\n\n});\n\nace.define(\"ace/autocomplete/text_completer\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n    var Range = acequire(\"../range\").Range;\n    \n    var splitRegex = /[^a-zA-Z_0-9\\$\\-\\u00C0-\\u1FFF\\u2C00-\\uD7FF\\w]+/;\n\n    function getWordIndex(doc, pos) {\n        var textBefore = doc.getTextRange(Range.fromPoints({row: 0, column:0}, pos));\n        return textBefore.split(splitRegex).length - 1;\n    }\n    function wordDistance(doc, pos) {\n        var prefixPos = getWordIndex(doc, pos);\n        var words = doc.getValue().split(splitRegex);\n        var wordScores = Object.create(null);\n        \n        var currentWord = words[prefixPos];\n\n        words.forEach(function(word, idx) {\n            if (!word || word === currentWord) return;\n\n            var distance = Math.abs(prefixPos - idx);\n            var score = words.length - distance;\n            if (wordScores[word]) {\n                wordScores[word] = Math.max(score, wordScores[word]);\n            } else {\n                wordScores[word] = score;\n            }\n        });\n        return wordScores;\n    }\n\n    exports.getCompletions = function(editor, session, pos, prefix, callback) {\n        var wordScore = wordDistance(session, pos, prefix);\n        var wordList = Object.keys(wordScore);\n        callback(null, wordList.map(function(word) {\n            return {\n                caption: word,\n                value: word,\n                score: wordScore[word],\n                meta: \"local\"\n            };\n        }));\n    };\n});\n\nace.define(\"ace/ext/language_tools\",[\"require\",\"exports\",\"module\",\"ace/snippets\",\"ace/autocomplete\",\"ace/config\",\"ace/lib/lang\",\"ace/autocomplete/util\",\"ace/autocomplete/text_completer\",\"ace/editor\",\"ace/config\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar snippetManager = acequire(\"../snippets\").snippetManager;\nvar Autocomplete = acequire(\"../autocomplete\").Autocomplete;\nvar config = acequire(\"../config\");\nvar lang = acequire(\"../lib/lang\");\nvar util = acequire(\"../autocomplete/util\");\n\nvar textCompleter = acequire(\"../autocomplete/text_completer\");\nvar keyWordCompleter = {\n    getCompletions: function(editor, session, pos, prefix, callback) {\n        if (session.$mode.completer) {\n            return session.$mode.completer.getCompletions(editor, session, pos, prefix, callback);\n        }\n        var state = editor.session.getState(pos.row);\n        var completions = session.$mode.getCompletions(state, session, pos, prefix);\n        callback(null, completions);\n    }\n};\n\nvar snippetCompleter = {\n    getCompletions: function(editor, session, pos, prefix, callback) {\n        var snippetMap = snippetManager.snippetMap;\n        var completions = [];\n        snippetManager.getActiveScopes(editor).forEach(function(scope) {\n            var snippets = snippetMap[scope] || [];\n            for (var i = snippets.length; i--;) {\n                var s = snippets[i];\n                var caption = s.name || s.tabTrigger;\n                if (!caption)\n                    continue;\n                completions.push({\n                    caption: caption,\n                    snippet: s.content,\n                    meta: s.tabTrigger && !s.name ? s.tabTrigger + \"\\u21E5 \" : \"snippet\",\n                    type: \"snippet\"\n                });\n            }\n        }, this);\n        callback(null, completions);\n    },\n    getDocTooltip: function(item) {\n        if (item.type == \"snippet\" && !item.docHTML) {\n            item.docHTML = [\n                \"<b>\", lang.escapeHTML(item.caption), \"</b>\", \"<hr></hr>\",\n                lang.escapeHTML(item.snippet)\n            ].join(\"\");\n        }\n    }\n};\n\nvar completers = [snippetCompleter, textCompleter, keyWordCompleter];\nexports.setCompleters = function(val) {\n    completers.length = 0;\n    if (val) completers.push.apply(completers, val);\n};\nexports.addCompleter = function(completer) {\n    completers.push(completer);\n};\nexports.textCompleter = textCompleter;\nexports.keyWordCompleter = keyWordCompleter;\nexports.snippetCompleter = snippetCompleter;\n\nvar expandSnippet = {\n    name: \"expandSnippet\",\n    exec: function(editor) {\n        return snippetManager.expandWithTab(editor);\n    },\n    bindKey: \"Tab\"\n};\n\nvar onChangeMode = function(e, editor) {\n    loadSnippetsForMode(editor.session.$mode);\n};\n\nvar loadSnippetsForMode = function(mode) {\n    var id = mode.$id;\n    if (!snippetManager.files)\n        snippetManager.files = {};\n    loadSnippetFile(id);\n    if (mode.modes)\n        mode.modes.forEach(loadSnippetsForMode);\n};\n\nvar loadSnippetFile = function(id) {\n    if (!id || snippetManager.files[id])\n        return;\n    var snippetFilePath = id.replace(\"mode\", \"snippets\");\n    snippetManager.files[id] = {};\n    config.loadModule(snippetFilePath, function(m) {\n        if (m) {\n            snippetManager.files[id] = m;\n            if (!m.snippets && m.snippetText)\n                m.snippets = snippetManager.parseSnippetFile(m.snippetText);\n            snippetManager.register(m.snippets || [], m.scope);\n            if (m.includeScopes) {\n                snippetManager.snippetMap[m.scope].includeScopes = m.includeScopes;\n                m.includeScopes.forEach(function(x) {\n                    loadSnippetFile(\"ace/mode/\" + x);\n                });\n            }\n        }\n    });\n};\n\nvar doLiveAutocomplete = function(e) {\n    var editor = e.editor;\n    var hasCompleter = editor.completer && editor.completer.activated;\n    if (e.command.name === \"backspace\") {\n        if (hasCompleter && !util.getCompletionPrefix(editor))\n            editor.completer.detach();\n    }\n    else if (e.command.name === \"insertstring\") {\n        var prefix = util.getCompletionPrefix(editor);\n        if (prefix && !hasCompleter) {\n            if (!editor.completer) {\n                editor.completer = new Autocomplete();\n            }\n            editor.completer.autoInsert = false;\n            editor.completer.showPopup(editor);\n        }\n    }\n};\n\nvar Editor = acequire(\"../editor\").Editor;\nacequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    enableBasicAutocompletion: {\n        set: function(val) {\n            if (val) {\n                if (!this.completers)\n                    this.completers = Array.isArray(val)? val: completers;\n                this.commands.addCommand(Autocomplete.startCommand);\n            } else {\n                this.commands.removeCommand(Autocomplete.startCommand);\n            }\n        },\n        value: false\n    },\n    enableLiveAutocompletion: {\n        set: function(val) {\n            if (val) {\n                if (!this.completers)\n                    this.completers = Array.isArray(val)? val: completers;\n                this.commands.on('afterExec', doLiveAutocomplete);\n            } else {\n                this.commands.removeListener('afterExec', doLiveAutocomplete);\n            }\n        },\n        value: false\n    },\n    enableSnippets: {\n        set: function(val) {\n            if (val) {\n                this.commands.addCommand(expandSnippet);\n                this.on(\"changeMode\", onChangeMode);\n                onChangeMode(null, this);\n            } else {\n                this.commands.removeCommand(expandSnippet);\n                this.off(\"changeMode\", onChangeMode);\n            }\n        },\n        value: false\n    }\n});\n});\n                (function() {\n                    ace.acequire([\"ace/ext/language_tools\"], function() {});\n                })();\n            \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/brace/ext/language_tools.js\n// module id = 370\n// module chunks = 3"],"sourceRoot":""}